<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>表达式的短路</title>
      <link href="/2020/03/27/biao-da-shi-de-duan-lu/"/>
      <url>/2020/03/27/biao-da-shi-de-duan-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="布尔运算符的断路"><a href="#布尔运算符的断路" class="headerlink" title="布尔运算符的断路"></a>布尔运算符的断路</h1><h4 id="首先-什么是表达式"><a href="#首先-什么是表达式" class="headerlink" title="首先, 什么是表达式?"></a>首先, 什么是表达式?</h4><blockquote><p>表达式是运算符和它们的操作数的序列，它指定一项计算。</p><p>表达式的求值可以产生一个结果（比如 2+2 的求值产生结果 4），也可能产生副作用（比如对 std::printf(“%d”,4) 的求值在标准输出上打印字符 ‘4’）。</p></blockquote><p>以下代码每一行的内容都是一个表达式:</p><pre class="line-numbers language-c++"><code class="language-c++">a = 1a++a = a * a + a - a | afoo()foo(a+a)a == a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意, <code>a++</code> 是表达式, <code>a++;</code> 就是一个语句了</strong></p><h4 id="其次-什么是表达式的副作用"><a href="#其次-什么是表达式的副作用" class="headerlink" title="其次, 什么是表达式的副作用?"></a>其次, 什么是表达式的副作用?</h4><p>表达式, 顾名思义, 是有一个值的. 很多情况下我们求一个表达式的值, 是为了使用它的值. 在求值的过程中对于变量的修改等操作被称为表达式的副作用.</p><p>比如, 对于表达式 <code>y++</code>, <code>y</code>的值<code>+1</code>就是这个表达式的副作用.</p><p>比如, 对于以下函数:</p><pre class="line-numbers language-c++"><code class="language-c++">int foo(){    static int i = 0;    return ++i;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对于表达式 <code>foo()</code>, <code>i</code> 的值的变化就是他的副作用.</p><p>再比如, 对于表达式 <code>printf(&quot;%d&quot;,a) + 1</code>, 输出了<code>a</code>的值就是他的副作用.</p><h3 id="布尔运算符的短路"><a href="#布尔运算符的短路" class="headerlink" title="布尔运算符的短路."></a>布尔运算符的短路.</h3><p>对于 “逻辑与(&amp;&amp;)” 和 “逻辑或(||)” 这两个运算, 他们有一个不同于其他运算符的特点, 就是<strong>运算符短路</strong>.</p><p>对于与运算, 如果他左边的表达式(也叫第一操作数)计算完是假的话, 无论右边的表达式(也叫第二操作数)的结果是多少, 最终的结果一定是假, 因此此时<strong>不会计算第二操作数</strong>, 第二操作数的<strong>副作用也不会发生</strong>.</p><p>对于与运算, 如果他左边的表达式(也叫第一操作数)计算完是真的话, 无论右边的表达式(也叫第二操作数)的结果是多少, 最终的结果一定是真, 因此此时<strong>不会计算第二操作数</strong>, 第二操作数的<strong>副作用也不会发生</strong>.</p><p>如, 对于以下代码:</p><pre class="line-numbers language-c++"><code class="language-c++">int a,b,c;a = 1;b = 1;c = a++ || b++;printf("%d%d%d\n",a,b,c);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为表达式<code>a++</code>的计算结果为<code>1</code>, 也就是真, 因此不会计算<code>b++</code>, 程序会输出211.</p>]]></content>
      
      
      
        <tags>
            
            <tag> C C++ 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯2019校内模拟题目</title>
      <link href="/2020/03/16/lan-qiao-bei-2019-xiao-nei-mo-ni-ti-mu/"/>
      <url>/2020/03/16/lan-qiao-bei-2019-xiao-nei-mo-ni-ti-mu/</url>
      
        <content type="html"><![CDATA[<h2 id="蓝桥杯北京工业大学模拟赛-2020-03-15"><a href="#蓝桥杯北京工业大学模拟赛-2020-03-15" class="headerlink" title="蓝桥杯北京工业大学模拟赛 2020.03.15"></a>蓝桥杯北京工业大学模拟赛 2020.03.15</h2><h3 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h3><p>在计算机存储中，15.125GB是多少MB？</p><h4 id="答案提交"><a href="#答案提交" class="headerlink" title="答案提交"></a>答案提交</h4><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果    为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h3 id="2-问题描述"><a href="#2-问题描述" class="headerlink" title="2. 问题描述"></a>2. 问题描述</h3><p>1200000有多少个约数（只计算正约数）。</p><h4 id="答案提交-1"><a href="#答案提交-1" class="headerlink" title="答案提交"></a>答案提交</h4><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h3 id="3-问题描述"><a href="#3-问题描述" class="headerlink" title="3. 问题描述"></a>3. 问题描述</h3><p>在1至2019中，有多少个数的数位中包含数字9？</p><p>注意，有的数中的数位中包含多个9，这个数只算一次。例如，1999这个数包含数字9，在计算只是算一个数。</p><h4 id="答案提交-2"><a href="#答案提交-2" class="headerlink" title="答案提交"></a>答案提交</h4><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h3 id="4-问题描述"><a href="#4-问题描述" class="headerlink" title="4. 问题描述"></a>4. 问题描述</h3><p>一棵包含有2019个结点的树，最多包含多少个叶结点？</p><h4 id="答案提交-3"><a href="#答案提交-3" class="headerlink" title="答案提交"></a>答案提交</h4><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h3 id="5-问题描述"><a href="#5-问题描述" class="headerlink" title="5. 问题描述"></a>5. 问题描述</h3><p>一个正整数如果任何一个数位不大于右边相邻的数位，则称为一个数位递增的数，例如1135是一个数位递增的数，而1024不是一个数位递增的数。</p><p>给定正整数 n，请问在整数 1 至 n 中有多少个数位递增的数？</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入的第一行包含一个整数 n。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一行包含一个整数，表示答案。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><pre><code>30</code></pre><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><pre><code>26</code></pre><h4 id="评测用例规模与约定"><a href="#评测用例规模与约定" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h4><p>对于 40% 的评测用例，1 &lt;= n &lt;= 1000。</p><p>对于 80% 的评测用例，1 &lt;= n &lt;= 100000。</p><p>对于所有评测用例，1 &lt;= n &lt;= 1000000。</p><h3 id="6-问题描述"><a href="#6-问题描述" class="headerlink" title="6. 问题描述"></a>6. 问题描述</h3><p>小明对类似于 hello 这种单词非常感兴趣，这种单词可以正好分为四段，第一段由一个或多个辅音字母组成，第二段由一个或多个元音字母组成，第三段由一个或多个辅音字母组成，第四段由一个或多个元音字母组成。</p><p>给定一个单词，请判断这个单词是否也是这种单词，如果是请输出yes，否则请输出no。</p><p>元音字母包括 a, e, i, o, u，共五个，其他均为辅音字母。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入一行，包含一个单词，单词中只包含小写英文字母。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出答案，或者为yes，或者为no。</p><h4 id="样例输入1"><a href="#样例输入1" class="headerlink" title="样例输入1"></a>样例输入1</h4><pre><code>lanqiao</code></pre><h4 id="样例输出2"><a href="#样例输出2" class="headerlink" title="样例输出2"></a>样例输出2</h4><pre><code>yes</code></pre><h4 id="样例输入1-1"><a href="#样例输入1-1" class="headerlink" title="样例输入1"></a>样例输入1</h4><pre><code>world</code></pre><h4 id="样例输出2-1"><a href="#样例输出2-1" class="headerlink" title="样例输出2"></a>样例输出2</h4><pre><code>no</code></pre><h3 id="7-问题描述"><a href="#7-问题描述" class="headerlink" title="7. 问题描述"></a>7. 问题描述</h3><p>在数列 a[1], a[2], …, a[n] 中，如果对于下标 i, j, k 满足 0&lt;i&lt;j&lt;k&lt;n+1 且 a[i]&lt;a[j]&lt;a[k]，则称 a[i], a[j], a[k] 为一组递增三元组，a[j]为递增三元组的中心。</p><p>给定一个数列，请问数列中有多少个元素可能是递增三元组的中心。</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入的第一行包含一个整数 n。</p><p>第二行包含 n 个整数 a[1], a[2], …, a[n]，相邻的整数间用空格分隔，表示给定的数列。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一行包含一个整数，表示答案。</p><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h4><pre><code>51 2 5 3 5</code></pre><h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h4><pre><code>2</code></pre><h4 id="样例说明"><a href="#样例说明" class="headerlink" title="样例说明"></a>样例说明</h4><p>a[2] 和 a[4] 可能是三元组的中心。</p><h4 id="评测用例规模与约定-1"><a href="#评测用例规模与约定-1" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h4><p>对于 50% 的评测用例，2 &lt;= n &lt;= 100，0 &lt;= 数列中的数 &lt;= 1000。</p><p>对于所有评测用例，2 &lt;= n &lt;= 1000，0 &lt;= 数列中的数 &lt;= 10000。</p><h3 id="8-问题描述"><a href="#8-问题描述" class="headerlink" title="8. 问题描述"></a>8. 问题描述</h3><p>小明想知道，满足以下条件的正整数序列的数量：</p><ol><li><p>第一项为 n；</p></li><li><p>第二项不超过 n；</p></li><li><p>从第三项开始，每一项小于前两项的差的绝对值。<br>计算，对于给定的 n，有多少种满足条件的序列。</p></li></ol><h4 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入一行包含一个整数 n。</p><h4 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示答案。答案可能很大，请输出答案除以10000的余数。</p><h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h4><pre><code>4</code></pre><h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h4><pre><code>7</code></pre><h4 id="样例说明-1"><a href="#样例说明-1" class="headerlink" title="样例说明"></a>样例说明</h4><p>以下是满足条件的序列：</p><pre><code>4 14 1 14 1 24 24 2 14 34 4</code></pre><h4 id="评测用例规模与约定-2"><a href="#评测用例规模与约定-2" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h4><p>对于 20% 的评测用例，1 &lt;= n &lt;= 5；</p><p>对于 50% 的评测用例，1 &lt;= n &lt;= 10；</p><p>对于 80% 的评测用例，1 &lt;= n &lt;= 100；</p><p>对于所有评测用例，1 &lt;= n &lt;= 1000。</p><h3 id="9-问题描述"><a href="#9-问题描述" class="headerlink" title="9. 问题描述"></a>9. 问题描述</h3><p>小明有一块空地，他将这块空地划分为 n 行 m 列的小块，每行和每列的长度都为 1。</p><p>小明选了其中的一些小块空地，种上了草，其他小块仍然保持是空地。</p><p>这些草长得很快，每个月，草都会向外长出一些，如果一个小块种了草，则它将向自己的上、下、左、右四小块空地扩展，这四小块空地都将变为有草的小块。</p><p>请告诉小明，k 个月后空地上哪些地方有草。</p><h4 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入的第一行包含两个整数 n, m。</p><p>接下来 n 行，每行包含 m 个字母，表示初始的空地状态，字母之间没有空格。如果为小数点，表示为空地，如果字母为 g，表示种了草。</p><p>接下来包含一个整数 k。</p><h4 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出 n 行，每行包含 m 个字母，表示 k 个月后空地的状态。如果为小数点，表示为空地，如果字母为 g，表示长了草。</p><h4 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h4><pre><code>4 5.g..........g.......2</code></pre><h4 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h4><pre><code>gggg.gggg.ggggg.ggg.</code></pre><h4 id="评测用例规模与约定-3"><a href="#评测用例规模与约定-3" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h4><p>对于 30% 的评测用例，2 &lt;= n, m &lt;= 20。</p><p>对于 70% 的评测用例，2 &lt;= n, m &lt;= 100。</p><p>对于所有评测用例，2 &lt;= n, m &lt;= 1000，1 &lt;= k &lt;= 1000。</p><h3 id="10-问题描述"><a href="#10-问题描述" class="headerlink" title="10. 问题描述"></a>10. 问题描述</h3><p>小明要组织一台晚会，总共准备了 n 个节目。然后晚会的时间有限，他只能最终选择其中的 m 个节目。</p><p>这 n 个节目是按照小明设想的顺序给定的，顺序不能改变。</p><p>小明发现，观众对于晚上的喜欢程度与前几个节目的好看程度有非常大的关系，他希望选出的第一个节目尽可能好看，在此前提下希望第二个节目尽可能好看，依次类推。</p><p>小明给每个节目定义了一个好看值，请你帮助小明选择出 m 个节目，满足他的要求。</p><h4 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入的第一行包含两个整数 n, m ，表示节目的数量和要选择的数量。</p><p>第二行包含 n 个整数，依次为每个节目的好看值。</p><h4 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一行包含 m 个整数，为选出的节目的好看值。</p><h4 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a>样例输入</h4><p>5 3<br>3 1 2 5 4</p><h4 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a>样例输出</h4><p>3 5 4</p><h4 id="样例说明-2"><a href="#样例说明-2" class="headerlink" title="样例说明"></a>样例说明</h4><p>选择了第1, 4, 5个节目。</p><h4 id="评测用例规模与约定-4"><a href="#评测用例规模与约定-4" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h4><p>对于 30% 的评测用例，1 &lt;= n &lt;= 20；</p><p>对于 60% 的评测用例，1 &lt;= n &lt;= 100；</p><p>对于所有评测用例，1 &lt;= n &lt;= 100000，0 &lt;= 节目的好看值 &lt;= 100000。</p>]]></content>
      
      
      
        <tags>
            
            <tag> OI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从结构体走向对象</title>
      <link href="/2020/03/16/cong-jie-gou-ti-zou-xiang-dui-xiang/"/>
      <url>/2020/03/16/cong-jie-gou-ti-zou-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="从结构体走向对象"><a href="#从结构体走向对象" class="headerlink" title="从结构体走向对象"></a>从结构体走向对象</h1><p>本文能够让你大致理解面向对象的一些概念, <strong>但是以下一切内容均不适用于参加OO课程的考试, 如果爆零, 后果自负</strong>.</p><h3 id="部分语法的介绍"><a href="#部分语法的介绍" class="headerlink" title="部分语法的介绍"></a>部分语法的介绍</h3><ol><li><strong>C++语言中, 定义结构体变量时, 类型中的struct可以省略, 如”struct 结构体名 变量名”可以简写为”结构体名 变量名 “. 以下均为简写形式.</strong></li><li>Java语言中, 所有<strong>内置的大写开头的类型</strong>都是类, <strong>所有对象都是”引用变量”</strong>, 可以理解为<strong>不能做运算的指针</strong>.<br> (指针运算指, 数组首项地址+1等于第二项地址的这种运算.)<br> 如:<pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">// int不是类, 是基本类型</span> <span class="token comment" spellcheck="true">// a是普通变量:</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Integer是类, b,c是引用变量:</span> Integer b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> Integer c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 上面的代码可以简单地理解为, <code>a</code>是一个<code>int</code>类型变量, 内容是<code>0</code>.<br> <code>b</code>是一个指向<code>Integer</code>变量的指针, 他指向的值是<code>0</code>.<br> <code>c</code>同理.<br> 因此, <code>b==c</code> 判断的是<code>b</code>和<code>c</code>是否指向同一个对象. 判断<code>b</code>和<code>c</code>相等应该用<code>b.equals(c)</code>.</li><li>这篇推送只讲概念, 不需要完全理解代码是什么意思, 具体语法部分都做了注释. 之后<del>大概</del>还会有推送来讲语法. 如果那里有代码不明白什么意思欢迎联系我或者后台给我留言.</li></ol><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>啥是类? 最简单的来说, 就是 C 语言中的结构体.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 定义一个类, 叫做Student. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Student中的一个字符串类型的变量     */</span>    String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Student中一个int类型的变量     */</span>    <span class="token keyword">int</span> ID<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在最开始非面向对象的编程中, 我们经常会用多个变量来描述同一对象的多个属性: 比如定义一个名字变量, 一个学号变量. 后来, 随着计算机科学的发展, 编程语言中支持了 <strong>结构体</strong> 这样一个特性, 能够让我们把 <strong>描述同一个东西不同属性</strong> 的多个变量统一管理. 结构体这一个概念, 到了面向对象的语言中, 结构体发展为了类的概念. </p><p><strong>可以把类理解为C语言中的结构体+方法</strong>.</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>在很多情况下, 我们之前编写的一些函数是<strong>针对某一个结构体</strong>提供的. 比如, 链表的删除某个节点的函数就可以认为是<strong>针对某个节点定义的, 效果是删除这个节点后面的一个节点</strong>. </p><p>我们可以把这样的函数定义为一个全局的函数, 把一个结构体变量作为参数传入这个函数:</p><pre class="line-numbers language-c++"><code class="language-c++">node* remove(node *now){    ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是, 如果这样自定义我们就会在别的任何地方都没法再次定义一个 <code>remove</code> 函数了. 这个只针对 <code>node*</code> 的函数占据了一个全局的名字 (或者说, 符号). 无疑, 这样的实现非常 <strong>不优雅</strong>. 因此, 我们更应该把进和 <code>node*</code> 这一个变量相关的函数定义成一个 <code>node*</code> 的 <strong>成员函数</strong>, 也叫 <strong>方法</strong>.</p><pre class="line-numbers language-c++"><code class="language-c++">struct node {    int data;    node *;    node* remove(){// 使用this指针访问当前的变量// 这里仅仅演示如何使用// 本程序并无法真的工作.        return this->next;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果这样定义<code>remove</code>函数, 就不会污染全局的作用域, 同时也不用我们显示的声明参数, 只需要如下调用:</p><pre class="line-numbers language-c++"><code class="language-c++">node* a;a->remove();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>即可自动把 <code>a</code> 或 <code>a的地址</code> 作为 <code>this指针</code> 参数传入给 <code>remove</code> 函数.</p><p>因此, 方法就是<strong>针对某一个类的函数</strong>, 为了方便<strong>我们把它放到类里面</strong>. 构造一个对象的函数是一个特殊的成员函数, 叫做类的构造函数.</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>其实, <del>编程语言演进的过程就是一代代程序程序员偷懒的过程</del> . 自从有了结构体的方法这东西之后, 人们就在想如果好几个结构体都有相同的方法, 能不能直接重复用一下?</p><p>比如对于如下几个结构体:</p><pre class="line-numbers language-c++"><code class="language-c++">struct shirt{     double price = 9.15;    void printPrice();};struct trousers {    double price = 2.33;    void printPrice();};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这两个结构体都分别有一个<code>printPrice</code>函数, 内容也都是一样的, 但是要写两次, 非常的<strong>不优雅</strong>, 于是人们引入了继承的概念:</p><blockquote><p>May there be inheritance!</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Clothes</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> price<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">printPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 输出price</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义Shirt类, 继承 Clothes 类.</span><span class="token keyword">class</span> <span class="token class-name">Shirt</span> <span class="token keyword">extends</span> <span class="token class-name">Clothes</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> price <span class="token operator">=</span> <span class="token number">9.15</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 同上, 继承 Clothes 类.</span><span class="token keyword">class</span> <span class="token class-name">Trousers</span> <span class="token keyword">extends</span> <span class="token class-name">Clothes</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> price <span class="token operator">=</span> <span class="token number">2.33</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样, <code>printPrice</code> 函数只需要写一次. 从某个类继承, 或者说派生出来的类, 会拥有父类的所有属性以及方法. 子类也可以对应的重写这些方法.</p><p>同时, 对于以上的代码中, 显然 <code>Clothes</code> 类和别的类有一个很大的区别. 我们会创建一个 <code>Shirt</code> 类的对象, 但是我们不会执行 <code>new Clothes()</code>. <code>Clothes</code> 类存在的意义在于提供给别人继承, 我们不会实例化这个类, 因此我们把这个类定义为<strong>抽象类(abstract class)</strong>:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 定义抽象类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Clothes</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> price<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">printPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个抽象类的意义是提供给别人来继承. 代码中的 <code>abstract</code> 标记了这是一个抽象类.</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 定义抽象类 Animal</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 要求继承这个类的类必须实现</span>    <span class="token comment" spellcheck="true">// bark方法, 同时提供一个默认的</span>    <span class="token comment" spellcheck="true">// bark方法.</span>    <span class="token keyword">void</span> <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bark"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义dog继承自animal</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 重写bark方法</span>    <span class="token keyword">void</span> <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Woof"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义cat继承自animal</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span>  <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 重写bark方法</span>    <span class="token keyword">void</span> <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Meow~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码中, <code>Animal</code>类规定了继承他的类要实现 <code>bark()</code> 方法. 那么, 对于如下的代码, 会输出什么呢?</p><pre class="line-numbers language-java"><code class="language-java">Animal a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建一个Dog, 进行隐式类型转换,</span><span class="token comment" spellcheck="true">// 转换为 Animal.</span>a<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面说到, Java中类的变量都是引用变量, 因此上面代码可以不严谨的理解为: 定义一个 指向<code>Animal</code>类型的指针 a, </p><p>在这里, <code>a</code> 是一个<code>Animal</code>类型的引用, 指向一个<code>Dog</code>对象. 但是, 尽管他是 <code>Animal</code> 类型的引用, 调用 <code>a.bark()</code>时仍然调用的是 <code>Dog</code> 的 <code>bark()</code> 方法. </p><p>多态, 狭义上指同一个名字(符号)指代多个物体. 在上面代码中, 如果不知道<code>a</code>指向的类型是什么, 调用 <code>a.bark()</code> 有三种可能的情况. 这就利用了多态的性质.</p><h3 id="例子以及面向对象的好处"><a href="#例子以及面向对象的好处" class="headerlink" title="例子以及面向对象的好处."></a>例子以及面向对象的好处.</h3><p>在C语言中, 由于没有这些特性, 极大地存在着代码冗余重复的现象, 如: <code>printf</code> 函数用于格式化并向控制台输出内容, <code>sprintf</code> 用于格式化并向字符串写入内容, <code>fprintf</code> 用于格式化并向文件写入内容.</p><p>上面的三个函数, 都完成了格式化这一个步骤, 但是代码被编写了三次. 如果需要向网络连接中格式化并写入内容, 则又需要重复一遍格式化的操作. 面向对象就能很好地解决这个问题.</p><p>如, 如果我们要向一个文件写入内容:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 注: 下面的注释从里往外看</span><span class="token comment" spellcheck="true">// 把新建的缓存输出流对象作为参数</span><span class="token comment" spellcheck="true">// 传入格式化输出流</span>PrintWriter out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// 把新建的编码输出流对象</span>    <span class="token comment" spellcheck="true">// 作为参数传入给缓存输出流</span>    <span class="token comment" spellcheck="true">// 让缓存输出流对象往</span>    <span class="token comment" spellcheck="true">// 编码输出流输出</span>    <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>        <span class="token comment" spellcheck="true">// 把新建的文件输出流对象</span>        <span class="token comment" spellcheck="true">// 作为参数, 传入编码输出流, </span>        <span class="token comment" spellcheck="true">// 规定编码输出流把编码后</span>        <span class="token comment" spellcheck="true">// 的内容输出到文件输出流</span>        <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>            <span class="token comment" spellcheck="true">// 新建一个文件输出流对象</span>            <span class="token comment" spellcheck="true">// 写入filename.txt</span>            <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"filename.txt"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中, 几个类的构造函数分别为:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">FileOutputStream</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 文件输出流, 参数是文件名</span><span class="token comment" spellcheck="true">// 向指定文件输出内容</span><span class="token comment" spellcheck="true">// 只能输出二进制的数据</span><span class="token function">OutputStreamWriter</span><span class="token punctuation">(</span>OutputStream out<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 编码输出流, 向某个输出流输出</span><span class="token comment" spellcheck="true">// 除了接受二进制数据还可以接受字符串</span><span class="token comment" spellcheck="true">// 将字符串编码后输出</span><span class="token function">BufferedWriter</span><span class="token punctuation">(</span>Writer out<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 缓存编码输出流</span><span class="token comment" spellcheck="true">// 输入的东西缓存后输出</span><span class="token function">PrintWriter</span><span class="token punctuation">(</span>Writer out<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 格式化流</span><span class="token comment" spellcheck="true">// 把输入的东西按照格式要求</span><span class="token comment" spellcheck="true">// 变成字符串, 传入底层流.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到, <code>FileOutputStream</code> 接受文件名作为参数, 单纯负责向文件中写入内容.</p><p><code>OutputStreamWriter</code> 接受任何 <code>OutputStream</code> 对象, 用于转换写入内容的编码.</p><p><code>BufferedWriter</code> 接受一个 <code>Writer</code>, 用于缓存即将写入 <code>Writer</code> 的内容.</p><p><code>PrintWriter</code> 接受一个 <code>Writer</code>, 用于格式化输入, 写入 <code>Writer</code> 中.</p><p>高内聚, 低耦合的设计模式就体现在了这里: 一个 <code>OutputStream</code> 类只需要实现 <code>write</code> 方法, 只能写入二进制字节数据, 而一个 <code>Writer</code> 负责处理编码问题, 可以写入字符串, 负责把写入的字符串编码为二进制字节数据, 而 <code>BufferedWriter</code> 则负责缓存上层写入的内容, 也同样只提供了写入字符串的方法. <code>PrintWriter</code> 负责提供格式化的方法, 可以格式化并写入 <code>int</code> <code>double</code> <code>char</code> <code>string</code> 等多种类型.</p><p>这样的设计, 使得功能的拓展变得很方便, 比如我们要向一个自定义的东西中写入数据, 完全可以只实现一个 <code>OutputStream</code> 而复用 <code>OutputStreamWriter</code>, <code>BufferedWriter</code>, <code>PrintWriter</code> 等很多和写入数据有关的类.</p><p><del>所以, 这样的实际模式大概是被不断加需求改需求的产品经理逼出来的</del></p><p>感谢 ☁️学长, </p><p>(如果可以的话, 能关注一下这个公众号吗)</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯模拟题解-1</title>
      <link href="/2020/03/16/lan-qiao-bei-mo-ni-ti-jie-1/"/>
      <url>/2020/03/16/lan-qiao-bei-mo-ni-ti-jie-1/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝桥杯校内模拟赛题解-1"><a href="#蓝桥杯校内模拟赛题解-1" class="headerlink" title="蓝桥杯校内模拟赛题解-1"></a>蓝桥杯校内模拟赛题解-1</h1><h3 id="1-在计算机存储中，15-125GB是多少MB？"><a href="#1-在计算机存储中，15-125GB是多少MB？" class="headerlink" title="1. 在计算机存储中，15.125GB是多少MB？"></a>1. 在计算机存储中，15.125GB是多少MB？</h3><h4 id="答案提交"><a href="#答案提交" class="headerlink" title="答案提交"></a>答案提交</h4><p>这是一道结果填空的题，你只需要算出结果后提交即可。</p><p>答案: 15488</p><h4 id="解析"><a href="#解析" class="headerlink" title="解析:"></a>解析:</h4><p>还要解析?????</p><h3 id="2-1200000有多少个约数（只计算正约数）。"><a href="#2-1200000有多少个约数（只计算正约数）。" class="headerlink" title="2. 1200000有多少个约数（只计算正约数）。"></a>2. 1200000有多少个约数（只计算正约数）。</h3><h4 id="答案提交-1"><a href="#答案提交-1" class="headerlink" title="答案提交"></a>答案提交</h4><p>这是一道结果填空的题，你只需要算出结果后提交即可。</p><p>答案: 96</p><h4 id="解析-1"><a href="#解析-1" class="headerlink" title="解析:"></a>解析:</h4><ol><li>暴力解法: <pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1200000</span><span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1200000</span> <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token operator">++</span>i<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>一般解法:<br>分解质因数, 得: 1200000 = 2^7<em>3</em>5^5.</li></ol><p>约数个数为等于: 8<em>2</em>6 = 96.</p><h3 id="3-在1至2019中，有多少个数的数位中包含数字9？"><a href="#3-在1至2019中，有多少个数的数位中包含数字9？" class="headerlink" title="3. 在1至2019中，有多少个数的数位中包含数字9？"></a>3. 在1至2019中，有多少个数的数位中包含数字9？</h3><p>注意，有的数中的数位中包含多个9，这个数只算一次。例如，1999这个数包含数字9，在计算只是算一个数。</p><p>答案: 544</p><h4 id="解析-2"><a href="#解析-2" class="headerlink" title="解析:"></a>解析:</h4><ol><li>快速解法:<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2019</span><span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">to_string</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"9"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> string<span class="token operator">::</span>npos<span class="token punctuation">)</span><span class="token punctuation">{</span>     ans<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>一般解法:<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2019</span><span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> now <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>now <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         ans <span class="token operator">++</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     now <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="4-一棵包含有2019个结点的树，最多包含多少个叶结点？"><a href="#4-一棵包含有2019个结点的树，最多包含多少个叶结点？" class="headerlink" title="4. 一棵包含有2019个结点的树，最多包含多少个叶结点？"></a>4. 一棵包含有2019个结点的树，最多包含多少个叶结点？</h3><p>答案: 2018, 如果题目问的是二叉树就是1010.</p><h4 id="解析-3"><a href="#解析-3" class="headerlink" title="解析:"></a>解析:</h4><p>正常的树叶子节点最多显然2018个. 如果是二叉树, 为了保证叶子节点最多我们要使得每一个非叶子节点都有两个孩子. 显然, 一棵满二叉树满足这个条件. </p><p>对于一个<code>2047</code>个节点的满二叉树, 共有<code>1024</code>个叶子节点, 我们<strong>“成对的”</strong>删去其中的<code>28</code>个之后, 正好剩余<code>2019</code>个节点. 删掉了<code>28</code>个叶子节点后, 他们的父节点也就成为了新的叶子节点, 因此叶子节点减少了<code>14</code>个. 答案就是<code>1024 - 14</code>.</p><p><strong>上述证明不严谨</strong></p><h3 id="5-问题描述"><a href="#5-问题描述" class="headerlink" title="5. 问题描述"></a>5. 问题描述</h3><p>一个正整数如果任何一个数位不大于右边相邻的数位，则称为一个数位递增的数，例如1135是一个数位递增的数，而1024不是一个数位递增的数。</p><p>给定正整数 n，请问在整数 1 至 n 中有多少个数位递增的数？</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入的第一行包含一个整数 n。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一行包含一个整数，表示答案。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><pre><code>30</code></pre><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><pre><code>26</code></pre><h4 id="评测用例规模与约定"><a href="#评测用例规模与约定" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h4><p>对于 40% 的评测用例，1 &lt;= n &lt;= 1000。</p><p>对于 80% 的评测用例，1 &lt;= n &lt;= 100000。</p><p>对于所有评测用例，1 &lt;= n &lt;= 1000000。</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解:"></a>题解:</h4><p>暴力即可, 时间复杂度为 O(n * log10(n)).</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> _ <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> _ <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> _<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> _<span class="token punctuation">;</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> last <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        i <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>last <span class="token operator">>=</span> i <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            last <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    ans <span class="token operator">+</span><span class="token operator">=</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-问题描述"><a href="#6-问题描述" class="headerlink" title="6. 问题描述"></a>6. 问题描述</h3><p>小明对类似于 hello 这种单词非常感兴趣，这种单词可以正好分为四段，第一段由一个或多个辅音字母组成，第二段由一个或多个元音字母组成，第三段由一个或多个辅音字母组成，第四段由一个或多个元音字母组成。</p><p>给定一个单词，请判断这个单词是否也是这种单词，如果是请输出yes，否则请输出no。</p><p>元音字母包括 a, e, i, o, u，共五个，其他均为辅音字母。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入一行，包含一个单词，单词中只包含小写英文字母。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出答案，或者为yes，或者为no。</p><h4 id="样例输入1"><a href="#样例输入1" class="headerlink" title="样例输入1"></a>样例输入1</h4><pre><code>lanqiao</code></pre><h4 id="样例输出2"><a href="#样例输出2" class="headerlink" title="样例输出2"></a>样例输出2</h4><pre><code>yes</code></pre><h4 id="样例输入1-1"><a href="#样例输入1-1" class="headerlink" title="样例输入1"></a>样例输入1</h4><pre><code>world</code></pre><h4 id="样例输出2-1"><a href="#样例输出2-1" class="headerlink" title="样例输出2"></a>样例输出2</h4><pre><code>no</code></pre><h4 id="解析-4"><a href="#解析-4" class="headerlink" title="解析"></a>解析</h4><p>暴力即可, 时间复杂度O(n).</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">aeiou</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> c <span class="token operator">==</span> <span class="token string">'a'</span> <span class="token operator">or</span> c <span class="token operator">==</span> <span class="token string">'e'</span> <span class="token operator">or</span> c <span class="token operator">==</span> <span class="token string">'i'</span> <span class="token operator">or</span> c <span class="token operator">==</span> <span class="token string">'o'</span> <span class="token operator">or</span> c <span class="token operator">==</span> <span class="token string">'u'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> size <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> pos <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">aeiou</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"no"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> pos <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">aeiou</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"no"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> pos <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">aeiou</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"no"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> pos <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">aeiou</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"no"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"yes"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-问题描述"><a href="#7-问题描述" class="headerlink" title="7. 问题描述"></a>7. 问题描述</h3><p>在数列 a[1], a[2], …, a[n] 中，如果对于下标 i, j, k 满足 0&lt;i&lt;j&lt;k&lt;n+1 且 a[i]&lt;a[j]&lt;a[k]，则称 a[i], a[j], a[k] 为一组递增三元组，a[j]为递增三元组的中心。</p><p>给定一个数列，请问数列中有多少个元素可能是递增三元组的中心。</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入的第一行包含一个整数 n。</p><p>第二行包含 n 个整数 a[1], a[2], …, a[n]，相邻的整数间用空格分隔，表示给定的数列。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一行包含一个整数，表示答案。</p><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h4><pre><code>51 2 5 3 5</code></pre><h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h4><pre><code>2</code></pre><h4 id="样例说明"><a href="#样例说明" class="headerlink" title="样例说明"></a>样例说明</h4><p>a[2] 和 a[4] 可能是三元组的中心。</p><h4 id="评测用例规模与约定-1"><a href="#评测用例规模与约定-1" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h4><p>对于 50% 的评测用例，2 &lt;= n &lt;= 100，0 &lt;= 数列中的数 &lt;= 1000。</p><p>对于所有评测用例，2 &lt;= n &lt;= 1000，0 &lt;= 数列中的数 &lt;= 10000。</p><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>乍一看<code>1e5</code>还以为不能暴力, 结果一看<code>n</code>的范围是<code>1e3</code>, 果断暴力走起, 复杂度O(n^2).</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> data<span class="token punctuation">[</span><span class="token number">1010</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">>></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token number">-1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            flag <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            flag <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> OI 竞赛 ICPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言中让某个协程无限堵塞的几种方式.</title>
      <link href="/2020/02/27/golang-block-a-goroutine/"/>
      <url>/2020/02/27/golang-block-a-goroutine/</url>
      
        <content type="html"><![CDATA[<h1 id="Go-语言中让某个协程无限堵塞的几种方式"><a href="#Go-语言中让某个协程无限堵塞的几种方式" class="headerlink" title="Go 语言中让某个协程无限堵塞的几种方式."></a>Go 语言中让某个协程无限堵塞的几种方式.</h1><p>Go 语言自带的 goroutine 特性会让我们需要在某些时候由 <code>main</code> 函数启动一些协程之后就无限阻塞, 让别的协程处理问题. 以下是一些方式:</p><h3 id="死循环法"><a href="#死循环法" class="headerlink" title="死循环法"></a>死循环法</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">for</span> <span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用这种方式会让你的程序 <strong>随机暴毙</strong>, 无法 Debug 找到问题出在哪儿. </p><p>原因: go 语言中的 goroutine <strong>并不是线程</strong>, 当且仅当遇到系统调用和io操作等时候会主动让出自己的时间片等待外部数据. 但是, 当程序运行死循环的时候 <strong>并没有任何io操作</strong>, 不会主动让出自己的时间片. 又由于线程调度的原因, 程序会在一个<strong>随机时间</strong>进入死循环执行, 导致整个程序所有协程全部卡死.<br>不仅如此, 由于系统会在别的协程进行io操作的时候进行携程调度, 因此 <strong>表面上观察到的现象是别的携程在进行io操作的时候堵死整个程序</strong> , 几乎无法找到bug在哪儿 🌝</p><h3 id="死循环让出时间片法"><a href="#死循环让出时间片法" class="headerlink" title="死循环让出时间片法"></a>死循环让出时间片法</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">for</span> <span class="token punctuation">{</span>    runtime<span class="token punctuation">.</span><span class="token function">Gosched</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>死循环执行 <code>runtime.Gosched()</code> 这一函数, 执行这个函数会让出当前协程的时间片, 稍后再回到此协程. 不会出bug, 但是效率偏低. (因为仍然在不断地切换到这个携程.)</p><h3 id="死循环Sleep法"><a href="#死循环Sleep法" class="headerlink" title="死循环Sleep法"></a>死循环Sleep法</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">for</span> <span class="token punctuation">{</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span>Hour<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>同上, 仍然有轻微的(但完全可以忽略)效率问题, 但是这样实现十分不优雅. </p><h3 id="阻塞的读取空数据法"><a href="#阻塞的读取空数据法" class="headerlink" title="阻塞的读取空数据法:"></a>阻塞的读取空数据法:</h3><pre class="line-numbers language-go"><code class="language-go">blockChan <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>a <span class="token operator">:=</span> <span class="token operator">&lt;-</span> blockChan<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这种方法创建一个不会有数据的 <code>Channel</code>, 并试图从中读取数据. 因为永远读不到数据, 因此会堵塞这个协程.</p><p>无效率问题, 但是实现仍然不优雅.</p><h3 id="WaitGroup法"><a href="#WaitGroup法" class="headerlink" title="WaitGroup法:"></a>WaitGroup法:</h3><pre class="line-numbers language-go"><code class="language-go">w <span class="token operator">:=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">{</span><span class="token punctuation">}</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建一个<code>WaitGroup</code>, 调用 <code>wait</code> 方法无限等待. 无效率问题, 但是仍然不优雅(要写三行).</p><h3 id="Select法"><a href="#Select法" class="headerlink" title="Select法:"></a>Select法:</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">select</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>select</code>被用于同步或异步的从<code>Channel</code>中读取数据. 因为这里没有指定任何<code>Channel</code>, 同时没有<code>default</code>来进行异步读取, 程序会阻塞的试图从没有<code>channel</code>中读取数据.</p><p>没有创建任何变量, 0内存开销, 同时调度器也再也不会调度这个协程, 也同样没有性能开销. </p><p>(关键是只要一行)</p>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 折腾记录 </tag>
            
            <tag> 踩坑记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Raw String 的巨坑</title>
      <link href="/2020/02/27/python-raw-string/"/>
      <url>/2020/02/27/python-raw-string/</url>
      
        <content type="html"><![CDATA[<h1 id="Raw-String-的巨坑"><a href="#Raw-String-的巨坑" class="headerlink" title="Raw String 的巨坑"></a>Raw String 的巨坑</h1><p>众所周知, 在编程语言中<code>\</code>字符有着特别的意义. 在一个字符串中, <code>\</code>字符会 “转义” 紧接着他的一个字符. 如, <code>\n</code> 会被转义为换行符, <code>\t</code> 会被转义为制表符等. 这种做法极大地方便了编程, 给予了我们一种方便的在字符串字面量 (源代码中的固定的量) 中表示一个无法输入的或者会破坏语法结构的字符的方式.</p><p>但是, 在有大量<code>\</code>的情况下我们不希望字符串中的 <code>\</code> 字符被转义, 如在表示地址或正则表达式的时候. 因此, 很多语言提供了 Raw String 字面量, 在 Raw string 字面量中 <code>\</code> 字符被视为普通的字符而不是转义符. 正如 Python 文档中描述的: </p><blockquote><p>Both string and bytes literals may optionally be prefixed with a letter ‘r’ or ‘R’; such strings are called raw strings and treat backslashes as literal characters. </p></blockquote><blockquote><p>字符串与字节字面量都可以以一个 r 或者 R 前缀来表示原始字符串. 在原始字符串中, \ 字符被当做普通字符而不是转义符来处理.</p></blockquote><p>正如, 在Python中:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token string">"asd\nsd\nsd"</span><span class="token punctuation">)</span>asd\nsd\nsd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>\n 会保持原样输出而不是被替换为换行符. </p><p>那么, 问题来了: 下面的代码会输出什么?</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>r"\"<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可能看到语法高亮的颜色不太对劲就会让你意识到, 在Python中输出一个这样的字符串会报错而不是输出一个 \ 字符. 在Python文档中这样写道:</p><blockquote><p>Even in a raw literal, quotes can be escaped with a backslash, but the backslash remains in the result; for example, r”&quot;“ is a valid string literal consisting of two characters: a backslash and a double quote; r”&quot; is not a valid string literal (even a raw string cannot end in an odd number of backslashes). Specifically, a raw literal cannot end in a single backslash (since the backslash would escape the following quote character). Note also that a single backslash followed by a newline is interpreted as those two characters as part of the literal, not as a line continuation.</p></blockquote><blockquote><p>即使在一个原始字面量中, 引号仍然会被 \ 字符转义, 只不过 \ 字符仍然保留在结果中. 如: r”&quot;“ 是一个合法的字符串而 r”&quot; 会被认为缺少了一个引号.</p></blockquote><p>这是因为, 在原始字面量的处理中, 并不是去掉了转义. 转义操作仍然在进行, 只不过正常情况下 ‘\n’ 会转移成换行符, 但是在原始字面量中会转移为字符串\n. 在分析那些字符需要转义的时候, 编译器(或者说解释器)并不清楚这个字符是否在一个 Raw String 中. 编译器会把他标记为需要转义, 在之后的步骤中再完成具体的转移操作. 但是对于 r”&quot; 这个字符串, 在第一步的时候编译器会认为 \ 符号转义了后面的”, 导致这个字符串的引号数量不匹配, 爆出语法错误. </p><p>(<del>所以锅还是得丢给编译器</del>)</p><p>注: 上文中编译器指广义上的编译器或解释器等.</p><p>感谢群里的小伙伴们, 没有你们的帮助和讨论就不会有这篇文章. </p>]]></content>
      
      
      
        <tags>
            
            <tag> Python string 编译原理 采坑记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鼠年大吉</title>
      <link href="/2020/01/24/shu-nian/"/>
      <url>/2020/01/24/shu-nian/</url>
      
        <content type="html"><![CDATA[<p>不多说了, 就祝各位鼠年大吉吧.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> O<span class="token operator">=</span><span class="token constant">__LINE__</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> OO putchar</span><span class="token macro property">#<span class="token directive keyword">define</span> Oo  *</span><span class="token macro property">#<span class="token directive keyword">define</span> O0 +</span><span class="token macro property">#<span class="token directive keyword">define</span> O00 -</span><span class="token macro property">#<span class="token directive keyword">define</span> OOO /</span><span class="token function">OO</span><span class="token punctuation">(</span>O Oo  O Oo  O <span class="token function">Oo</span>  <span class="token punctuation">(</span>O O0 O OOO O<span class="token punctuation">)</span> <span class="token function">Oo</span>  <span class="token punctuation">(</span>O O0 O OOO O<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">OO</span><span class="token punctuation">(</span>O Oo  O <span class="token function">Oo</span>  <span class="token punctuation">(</span>O Oo  O O0 O OOO O<span class="token punctuation">)</span> <span class="token function">Oo</span>  <span class="token punctuation">(</span>O Oo  O O0 O OOO O<span class="token punctuation">)</span> O00 O O00 O OOO O<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">OO</span><span class="token punctuation">(</span>O Oo  O Oo  O Oo  O <span class="token function">Oo</span>  <span class="token punctuation">(</span>O Oo  O Oo  O O00 O OOO O<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">OO</span><span class="token punctuation">(</span>O Oo  O Oo  O Oo  O <span class="token function">Oo</span>  <span class="token punctuation">(</span>O Oo  O Oo  O O00 O OOO O<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">OO</span><span class="token punctuation">(</span><span class="token punctuation">(</span>O <span class="token function">Oo</span>  <span class="token punctuation">(</span>O O0 O O0 O<span class="token punctuation">)</span> O00  O  OOO  O<span class="token punctuation">)</span> <span class="token function">Oo</span>  <span class="token punctuation">(</span>O <span class="token function">Oo</span>  <span class="token punctuation">(</span>O O0 O O0 O<span class="token punctuation">)</span> O00 O OOO O<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">OO</span><span class="token punctuation">(</span>O Oo  O Oo  O Oo  O Oo  O<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">OO</span><span class="token punctuation">(</span><span class="token punctuation">(</span>O Oo  O Oo  O O00 O OOO O<span class="token punctuation">)</span> <span class="token function">Oo</span>  <span class="token punctuation">(</span>O <span class="token function">Oo</span>  <span class="token punctuation">(</span>O O0 O O0 O<span class="token punctuation">)</span> O00 O OOO O<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">OO</span><span class="token punctuation">(</span>O Oo  O <span class="token function">Oo</span>  <span class="token punctuation">(</span>O Oo  O O0 O OOO O<span class="token punctuation">)</span> <span class="token function">Oo</span>  <span class="token punctuation">(</span>O Oo  O O0 O OOO O<span class="token punctuation">)</span> <span class="token function">O0</span> <span class="token punctuation">(</span>O <span class="token function">Oo</span>  <span class="token punctuation">(</span>O O0 O O0 O<span class="token punctuation">)</span> O00 O OOO O<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">OO</span><span class="token punctuation">(</span>O Oo  O <span class="token function">Oo</span>  <span class="token punctuation">(</span>O Oo  O O0 O OOO O<span class="token punctuation">)</span> <span class="token function">Oo</span>  <span class="token punctuation">(</span>O Oo  O O0 O OOO O<span class="token punctuation">)</span> <span class="token function">O0</span> <span class="token punctuation">(</span>O <span class="token function">Oo</span>  <span class="token punctuation">(</span>O O0 O OOO O<span class="token punctuation">)</span> <span class="token function">Oo</span>  <span class="token punctuation">(</span>O O0 O OOO O<span class="token punctuation">)</span><span class="token punctuation">)</span> O00 O OOO O<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">OO</span><span class="token punctuation">(</span><span class="token punctuation">(</span>O Oo  O O0 O OOO O<span class="token punctuation">)</span> <span class="token function">Oo</span>  <span class="token punctuation">(</span>O Oo  O <span class="token function">Oo</span>  <span class="token punctuation">(</span>O O0 O O0 O OOO O<span class="token punctuation">)</span> O0 O O0 O OOO O<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">OO</span><span class="token punctuation">(</span>O Oo  O <span class="token function">Oo</span>  <span class="token punctuation">(</span>O Oo  O O0 O OOO O<span class="token punctuation">)</span> <span class="token function">Oo</span>  <span class="token punctuation">(</span>O Oo  O O0 O OOO O<span class="token punctuation">)</span> O0 O OOO O<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">OO</span><span class="token punctuation">(</span>O Oo  O Oo  O Oo  O Oo  O<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">OO</span><span class="token punctuation">(</span><span class="token punctuation">(</span>O O0 O OOO O<span class="token punctuation">)</span> <span class="token function">Oo</span>  <span class="token punctuation">(</span>O O0 O OOO O<span class="token punctuation">)</span> Oo  O <span class="token function">Oo</span>  <span class="token punctuation">(</span>O O0 O O0 O OOO O<span class="token punctuation">)</span> O00 O OOO O<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">OO</span><span class="token punctuation">(</span>O Oo  O <span class="token function">Oo</span>  <span class="token punctuation">(</span>O Oo  O O0 O OOO O<span class="token punctuation">)</span> <span class="token function">Oo</span>  <span class="token punctuation">(</span>O Oo  O O0 O OOO O<span class="token punctuation">)</span> O0 O OOO O<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">OO</span><span class="token punctuation">(</span>O Oo  O <span class="token function">Oo</span>  <span class="token punctuation">(</span>O Oo  O O0 O OOO O<span class="token punctuation">)</span> <span class="token function">Oo</span>  <span class="token punctuation">(</span>O Oo  O O0 O OOO O<span class="token punctuation">)</span> O00 O O00 O OOO O<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">OO</span><span class="token punctuation">(</span><span class="token punctuation">(</span>O Oo  O O0 O OOO O<span class="token punctuation">)</span> <span class="token function">Oo</span>  <span class="token punctuation">(</span>O Oo  O <span class="token function">Oo</span>  <span class="token punctuation">(</span>O O0 O O0 O OOO O<span class="token punctuation">)</span> O0 O O0 O OOO O<span class="token punctuation">)</span> O00 O OOO O<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">OO</span><span class="token punctuation">(</span>O Oo  O Oo  O Oo  O Oo  O O0 O OOO O<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>链表参考实现</title>
      <link href="/2019/11/12/lian-biao-can-kao-shi-xian/"/>
      <url>/2019/11/12/lian-biao-can-kao-shi-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="链表参考实现代码"><a href="#链表参考实现代码" class="headerlink" title="链表参考实现代码"></a>链表参考实现代码</h1><p>处理了传入非法参数等大部分特殊情况.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">struct</span> N<span class="token punctuation">{</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token keyword">struct</span> N <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> N <span class="token operator">*</span> nodePtr<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> N node<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 根据数组创建长度为n的链表 * @param value * @param n * @return */</span>nodePtr <span class="token function">buildByArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    nodePtr head <span class="token operator">=</span> <span class="token punctuation">(</span>nodePtr<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    nodePtr tail <span class="token operator">=</span> head<span class="token punctuation">;</span>    nodePtr t <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    head<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    head<span class="token operator">-</span><span class="token operator">></span>value <span class="token operator">=</span> value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    tail <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        t <span class="token operator">=</span> <span class="token punctuation">(</span>nodePtr<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token operator">-</span><span class="token operator">></span>value <span class="token operator">=</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        t<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        tail<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> t<span class="token punctuation">;</span>        tail <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 构建一个值全部为0的长度为n的链表 * @param n * @return */</span>nodePtr <span class="token function">buildByZeros</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    nodePtr head <span class="token operator">=</span> <span class="token punctuation">(</span>nodePtr<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    nodePtr tail <span class="token operator">=</span> head<span class="token punctuation">;</span>    nodePtr t <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    head<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    head<span class="token operator">-</span><span class="token operator">></span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    tail <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        t <span class="token operator">=</span> <span class="token punctuation">(</span>nodePtr<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token operator">-</span><span class="token operator">></span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        t<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        tail<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> t<span class="token punctuation">;</span>        tail <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 在链表头部添加一个节点 * @param head * @param value * @return nodePtr */</span>nodePtr <span class="token function">insertAsHead</span><span class="token punctuation">(</span>nodePtr head<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>    nodePtr p <span class="token operator">=</span> <span class="token punctuation">(</span>nodePtr<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-</span><span class="token operator">></span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    p<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 在链表尾部添加一个新节点 * @param head * @param value * @return */</span>nodePtr <span class="token function">insertAsTail</span><span class="token punctuation">(</span>nodePtr head<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>    nodePtr h <span class="token operator">=</span> head<span class="token punctuation">;</span>    nodePtr p<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        head <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    p <span class="token operator">=</span> <span class="token punctuation">(</span>nodePtr<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-</span><span class="token operator">></span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    p<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    head<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token keyword">return</span> h<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 在指定节点后面插入一个新节点 * @param after * @param value * @return */</span>nodePtr <span class="token function">insertAfter</span><span class="token punctuation">(</span>nodePtr after<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>    nodePtr tmp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>after <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    tmp <span class="token operator">=</span> <span class="token punctuation">(</span>nodePtr<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tmp<span class="token operator">-</span><span class="token operator">></span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    tmp<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> after<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    after<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 返回第一个指定值的value * @param head * @param value * @return */</span>nodePtr <span class="token function">findByValue</span><span class="token punctuation">(</span>nodePtr head<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>    nodePtr p <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">==</span> p<span class="token operator">-</span><span class="token operator">></span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> p<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 返回链表中的第ID个节点 * @param head * @param id * @return */</span>nodePtr <span class="token function">findByIndex</span><span class="token punctuation">(</span>nodePtr head<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>    nodePtr p <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>id<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 删除链表中第一个指定值的节点 * @param head * @param value * @return */</span>nodePtr <span class="token function">delByValue</span><span class="token punctuation">(</span>nodePtr head<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>    nodePtr p <span class="token operator">=</span> head<span class="token punctuation">;</span>    nodePtr t<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">-</span><span class="token operator">></span>value <span class="token operator">==</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>        p <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">==</span> p<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>            t <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            p<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> t<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 删除链表中第ID个节点 * @param head * @param id * @return */</span>nodePtr <span class="token function">delByIndex</span><span class="token punctuation">(</span>nodePtr head<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>    nodePtr t <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    nodePtr p<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        p <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    p <span class="token operator">=</span> <span class="token function">findByIndex</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> id<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    t <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    p<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> t<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 打印链表 * @param head */</span><span class="token keyword">void</span> <span class="token function">printList</span><span class="token punctuation">(</span>nodePtr head<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> head<span class="token operator">-</span><span class="token operator">></span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 删除链表, 释放空间 * @param head */</span><span class="token keyword">void</span> <span class="token function">freeList</span><span class="token punctuation">(</span>nodePtr head<span class="token punctuation">)</span><span class="token punctuation">{</span>    nodePtr p <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">free</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    nodePtr head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> values<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    head <span class="token operator">=</span> <span class="token function">buildByArray</span><span class="token punctuation">(</span>values<span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printList</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">insertAfter</span><span class="token punctuation">(</span>head<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printList</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    head <span class="token operator">=</span> <span class="token function">delByIndex</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printList</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    head <span class="token operator">=</span> <span class="token function">delByValue</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printList</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printList</span><span class="token punctuation">(</span><span class="token function">findByValue</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">freeList</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 公众号同步推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串,字符数组,字符指针</title>
      <link href="/2019/11/12/zi-fu-chuan-zi-fu-shu-zu-zi-fu-zhi-zhen/"/>
      <url>/2019/11/12/zi-fu-chuan-zi-fu-shu-zu-zi-fu-zhi-zhen/</url>
      
        <content type="html"><![CDATA[<h1 id="字符-字符数组-字符指针和字符串"><a href="#字符-字符数组-字符指针和字符串" class="headerlink" title="字符, 字符数组, 字符指针和字符串."></a>字符, 字符数组, 字符指针和字符串.</h1><p>上回说到, 有一种很常见的情境下我们一直在使用字符数组, 但调用函数的时候并没有传入数组的大小. 这个情景就是字符串. </p><p>实际上, c语言标准中并没有所谓的”字符串”类型, 所谓的字符串都是一定字符数组. </p><p>调用字符串相关函数的时候, 传入的都只是数组名字, 正如上篇推送所说的, 对于接受数组为参数的函数, 参数实际上是指针. 字符串相关函数都只是读取指针指向的值, 让指针<code>+1</code>, 等到指针指向的值为<code>&#39;\0&#39;</code>为止. 因此, 字符串必须以\0结尾.</p><p>也正因为如此, 一个字符指针可以作为参数传入如<code>puts</code>等相关函数. 如, 对于一个字符串数组(char的二维数组)<code>char data[100][100]</code>, <code>data[0]</code>是这个二维数组的第0个元素, 也就是一个一维数组 (<code>char [100]</code>). <code>data[0]</code>就是指向这个一维数组首元素的指针. 比如, 求这个字符串数组中最长的一个字符串可以这么做:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">getLongest</span><span class="token punctuation">(</span><span class="token keyword">char</span> strs<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    注释<span class="token operator">:</span> 还记得为啥要写第二维的大小吗<span class="token operator">?</span>    <span class="token keyword">char</span> <span class="token operator">*</span> ret <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token function">strlen</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ret <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>值得注意的是, 返回的ret是一个指向字符串数组(char的二维数组)中的某个字符串的首元素的地址, 并不是复制了一份字符串返回. 如果修改了原先字符串数组中的值, 从ret指针读取到的值也会一样改变.</p><p>在字符串数组中, 漏写<code>\0</code>会引发更加奇怪的问题. 对于以下代码:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">char</span> strs<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'\0'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>        strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'*'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>他会输出什么内容呢? 大概率是类似下面这样的东西:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>乱码乱码乱码<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>乱码乱码乱码<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>乱码乱码乱码<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>乱码乱码乱码<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>乱码乱码乱码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么会出现这种现象呢?</p><pre class="line-numbers language-cpp"><code class="language-cpp">左滑查看答案<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>​<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span> puts函数会从传入的指针 左滑查看答案<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>​<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span> 开始往后遍历输出<span class="token punctuation">,</span> 遇到\<span class="token number">0</span>左滑查看答案<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>​<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span> 才停止输出<span class="token punctuation">.</span> 因此<span class="token punctuation">,</span> 当他从strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>左滑查看答案<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>​<span class="token operator">--</span><span class="token operator">></span> 打印到strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>时<span class="token punctuation">,</span> 左滑查看答案<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>​<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> 下一个字节实际上是strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 左滑查看答案<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>​<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> 仍然不是\<span class="token number">0</span><span class="token punctuation">.</span> 后面的几个字符串被左滑查看答案<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>​<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> 打印了好几次<span class="token punctuation">.</span> 当打印完全部字符串后<span class="token punctuation">,</span> 左滑查看答案<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>​<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span> puts会接着往后打印<span class="token punctuation">,</span> 由于后面是左滑查看答案<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>​<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span> 未初始化的内存<span class="token punctuation">,</span> 因此打印出来乱码<span class="token punctuation">,</span> 左滑查看答案<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>​<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span> 直到某个地方恰巧为\<span class="token number">0</span>才停止<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有一个有意思的问题, 那就是以下代码是什么意思:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">gets</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span> p <span class="token operator">=</span> str<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">do</span> something<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token operator">++</span>p<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们来逐层分析这一句: <code>p</code>是一个指向<code>char*</code>的指针, <code>*p</code>是这个char变量所存储的值. <code>while(*p)</code> 就是当这个char变量存储的值不为0的时候继续循环. (非0就是真). 又由于<code>&#39;\0</code>的ascii码是0, 因此, 这句话的全部意思是当<code>p</code>指向的char为<code>\0</code>时退出循环.</p><p>下面是附录: 增强可读性后的几个字符串相关函数的实现. </p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>org<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s <span class="token operator">=</span> org<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>        s<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    s <span class="token operator">=</span> s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s <span class="token operator">-</span> org<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>ret<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>s2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s1 <span class="token operator">=</span> ret<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>s1 <span class="token operator">=</span> <span class="token operator">*</span>s2<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        s1<span class="token operator">++</span><span class="token punctuation">;</span>        s2<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strcat</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>ret<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>s2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s1 <span class="token operator">=</span> ret<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>s1 <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        s1<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    s1<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>s1 <span class="token operator">=</span> <span class="token operator">*</span>s2<span class="token punctuation">)</span><span class="token punctuation">{</span>        s1<span class="token operator">++</span><span class="token punctuation">;</span>        s2<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 公众号同步推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针 数组 指针数组和数组指针</title>
      <link href="/2019/11/10/zhi-zhen-shu-zu-zhi-zhen-shu-zu-he-shu-zu-zhi-zhen/"/>
      <url>/2019/11/10/zhi-zhen-shu-zu-zhi-zhen-shu-zu-he-shu-zu-zhi-zhen/</url>
      
        <content type="html"><![CDATA[<h1 id="指针-数组-指针数组-和数组指针"><a href="#指针-数组-指针数组-和数组指针" class="headerlink" title="指针, 数组, 指针数组, 和数组指针"></a>指针, 数组, 指针数组, 和数组指针</h1><p>这里, 更多的并不是教给大家什么是数组, 什么是指针数组. 更多的, 是教给大家理解数组和指针的本质.</p><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>详见<a href="这里">/2019/11/09/zhi-zhen-shi-sha/</a></p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义:"></a>定义:</h5><pre class="line-numbers language-cpp"><code class="language-cpp">元素类型 数字名称<span class="token punctuation">[</span>数组大小<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="使用"><a href="#使用" class="headerlink" title="使用:"></a>使用:</h5><p>对于定义如下的一个数组:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> data<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="使用元素"><a href="#使用元素" class="headerlink" title="使用元素:"></a>使用元素:</h5><pre class="line-numbers language-cpp"><code class="language-cpp">data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="使用名字"><a href="#使用名字" class="headerlink" title="使用名字:"></a>使用名字:</h5><p>data 是 数组”首元素”的指针</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意, data是”右值”, 不可赋值.</p><p><del>不知道右值是啥的快去看上一篇推送</del></p><h5 id="地址运算"><a href="#地址运算" class="headerlink" title="地址运算:"></a>地址运算:</h5><p><code>data + 1</code>在数值上等于<code>data</code>的值+4. (int占4个字节)</p><p>复习: 指针+1, 实际指向的地址加了<code>sizeof(指向的类型)</code>.</p><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><p>二维数组就是”数组的数组”. 如何理解这一点呢?</p><h5 id="二维数组的定义"><a href="#二维数组的定义" class="headerlink" title="二维数组的定义:"></a>二维数组的定义:</h5><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> data<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述代码定义了一个数组, 这个数组的元素是”10个int类型构成的数组”. 如何理解? 数组定义的阅读要”从里向外阅读”. 例如:</p><p>int <strong>data[5]</strong>[10];</p><p>定义一个数组, 名字叫data, 大小为5</p><p><strong>int</strong> data[5]<strong>[10]</strong>;</p><p>数组的元素的类型是<code>int [10]</code>, 也就是大小为10的int数组.</p><blockquote><p>数据类型: 如果不好理解 int [10] 是一个类型, 只需要记住 去掉定义变量时候的变量名字, 剩下的东西就是一个类型. 如:</p><p>对于 int data[10], 去掉data后剩下的部分int [10] 就是变量类型.</p><p>同理, 下面要讲到的 int (*)[10] 也是变量类型</p></blockquote><p>二维数组元素的使用和一位数组基本相同, 这里不再赘述.</p><h5 id="二维数组的地址的使用"><a href="#二维数组的地址的使用" class="headerlink" title="二维数组的地址的使用:"></a>二维数组的地址的使用:</h5><p>小问答: 对于定义如下的数组:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> data<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>data+1的地址数值上等于多少?</p><pre class="line-numbers language-cpp"><code class="language-cpp">A<span class="token punctuation">.</span> data <span class="token operator">+</span> <span class="token function">4</span><span class="token punctuation">(</span>数值上<span class="token punctuation">)</span>B<span class="token punctuation">.</span> data <span class="token operator">+</span> <span class="token function">40</span><span class="token punctuation">(</span>数值上<span class="token punctuation">)</span>C<span class="token punctuation">.</span> data <span class="token operator">+</span> <span class="token function">80</span><span class="token punctuation">(</span>数值上<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp">左滑查看答案 <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span> 由于data是<span class="token string">"元素为int [20]"</span>的数组<span class="token punctuation">,</span> 所以 <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data的元素<span class="token punctuation">)</span> 是 <span class="token number">20</span><span class="token operator">*</span><span class="token number">4</span> <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">,</span> 所以 data<span class="token operator">+</span><span class="token number">1</span> 的地址数值上等于 data <span class="token operator">+</span> <span class="token number">80</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>复习: 对于如上定义, data 的元素的类型为”int [20]”. 实际上, 如果通过下标计算地址, 应该如下计算:</p><pre><code>data[i][j] == *(data + i) + j;</code></pre><p>如何理解上面的代码? *(data + i) 的类型又是什么?</p><pre class="line-numbers language-cpp"><code class="language-cpp">左滑查看答案 <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span> data的元素为 <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 因此 <span class="token operator">*</span><span class="token punctuation">(</span>data <span class="token operator">+</span> i<span class="token punctuation">)</span> 是 data数组的第i个元素<span class="token punctuation">,</span> 也就是第i个大小为<span class="token number">20</span>的<span class="token keyword">int</span>数组<span class="token punctuation">.</span>左滑查看答案 <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> 是data中的第i个元素的第j个元素<span class="token punctuation">.</span> <span class="token punctuation">(</span>data的第i个元素是一个一维数组<span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>(复习: *运算符是”根据地址取所在那个地址的元素”)</p><p>通过上面的练习, 相信大家也理解了”二维数组就是元素是数组的数组”. </p><p>这样子, 也就很容易能理解为什么二维数组作为参数要传入”第二维”的大小了. 对于以下代码:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>这个函数的参数data是一个数组<span class="token punctuation">,</span> 元素是<span class="token keyword">int</span>并不需要知道数组的大小<span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>这个函数的参数data是一个数组<span class="token punctuation">,</span> 元素是 <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span>因为需要知道元素的类型<span class="token punctuation">,</span> 因此必须知道数组第二维的大小<span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h4><p>多维数组的理解和二维数组相同, 比如三维数组是”元素为二维数组的数组”. 因为并不常用, 这里不再赘述.</p><h3 id="数组作为函数参数"><a href="#数组作为函数参数" class="headerlink" title="数组作为函数参数"></a>数组作为函数参数</h3><p>首先, 需要说明的一点是, <strong>数组作为函数参数的时候, 对于被调用的函数, 参数是一个指针</strong>. 无论传入什么数组, 对于被调用者, 参数的类型都是一个指针. 因此, 以下几个函数原型是等价的:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>而同时, 对于被调用的函数, 参数永远是一个指针, 因此对于上面的第三个函数原型, 传入一个类型为<code>int[20]</code>的数组也是可以编译通过的.</p><p>也正因为这个原因, 被调用的函数没有办法知道传入的数组的大小, 也没有办法限制传入的数组的大小, 因此只能显式的传入另一个参数<code>n</code>作为数组大小.</p><p>同理, 参数是一个指针, 需要知道指针指向的类型是什么. 这一点也同样可以理解为什么二位数组传参的时候要指定第二维的大小:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这两种声明等价. 第二种声明的参数类型是”指向一个int[20]”的指针(也就是下面会讲到的数组指针), 显然, 需要知道指向的数组多大, 因此必须说明第二维的大小.</p><h3 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h3><p>指针数组, 从字面意思来看, 就是元素是指针的数组.</p><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义:"></a>定义:</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span>data<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token constant">NULL</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意, 一定要初始化, 否则会有问题.</p><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用:"></a>使用:</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    还记得为啥要<span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>吗<span class="token operator">?</span><span class="token punctuation">}</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="阅读"><a href="#阅读" class="headerlink" title="阅读:"></a>阅读:</h4><p>对于上面的定义和初始化, <code>data</code>是指针数组的名字, 也就是指向指针数组首元素的指针. (指针的指针). <code>data[i]</code> 是<code>data</code>这一个数组的第i个元素, 也就是一个指向int的指针. 指针可以当成数组来使用, <code>data[i][j]</code> 和 <code>*(data[i] + j)</code>是等价的.</p><p>经过上述代码创建的一个指针数组data的使用和<code>int data[10][10]</code>基本相同, 区别在于后者保证数组和数组之间的内存地址是连续的. <code>data[0][9]</code> 和 <code>data[1][0]</code> 是连续的, 而如果使用指针数组方式创建的data, 不能保证 <code>data[0][9]</code> 和 <code>data[1][0]</code> 在内存上连续.</p><h3 id="数组指针"><a href="#数组指针" class="headerlink" title="数组指针"></a>数组指针</h3><p>数组指针, 从字面意思来看就是”指向数组的指针”. </p><h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述代码定义了一个指向长度为10的int数组(int [10])的指针.</p><h4 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h4><p>一般, 我们并不会使用到数组指针. 当且仅当一个情况下我们会在我们不知不觉的时候使用数组指针:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>前面提到过, 数组作为参数传入函数的时候, 对于被调用的函数参数就是指针. 因此, 这里参数是一个”元素为<code>int[20]</code>“的数组(数组的数组), 因此, 在函数内部, data实际上就是一个”指向<code>int[20]</code>“的指针(<code>int (*)[20]</code>).</p><p>一般并不需要使用数组指针的性质, 当编译器报错有<code>int (*)[20]</code>相关的东西时, 知道这是一个指向数组的指针即可.</p><hr><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><h4 id="数组指针和指针数组的定义特别相似"><a href="#数组指针和指针数组的定义特别相似" class="headerlink" title="数组指针和指针数组的定义特别相似."></a>数组指针和指针数组的定义特别相似.</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span>data<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token constant">NULL</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>data1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上述代码中, <code>data</code>是指针数组(指针的数组), <code>data1</code>是数组指针(数组的指针)</p><h4 id="不要对数组和指针使用sizeof"><a href="#不要对数组和指针使用sizeof" class="headerlink" title="不要对数组和指针使用sizeof."></a>不要对数组和指针使用sizeof.</h4><p>上面提到过, 对于被调用的函数, 数组参数实际上就是一个指针, 在函数内部对数组进行<code>sizeof</code>获取到的其实是指针占用的内存的大小(4字节或8字节). 同时, 对数组和指针使用<code>sizeof</code>会导致各种神奇的行为, 因此尽量不要对数组和指针使用<code>sizeof</code>. 当且仅当如<code>malloc(10 * sizeof(int))</code>时使用sizeof.</p><hr><h3 id="小测验"><a href="#小测验" class="headerlink" title="小测验"></a>小测验</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> data<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述代码中, data的类型是?</p><pre><code>左滑查看答案 ----------------------------------------&gt; int*</code></pre><hr><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上述两个类型中, 哪个是数组指针, 哪个是指针数组?</p><p>(复习: 定义变量的语句去掉变量名字剩下的部分就是变量类型. 如<code>int *data[5]</code>去掉<code>data</code>后剩下的<code>int *[5]</code> 是一个类型.)</p><pre class="line-numbers language-cpp"><code class="language-cpp">左滑查看答案 <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>  前者是数组指针<span class="token punctuation">,</span> 后者是指针数组<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> data<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述代码中, data的类型是?</p><pre class="line-numbers language-cpp"><code class="language-cpp">左滑查看答案 <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 也就是指向 <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> 的指针<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> data<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>data+1的值 和 data的值 在数值上差多少?</p><pre class="line-numbers language-cpp"><code class="language-cpp">左滑查看答案 <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span> 差一个 <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 也就是<span class="token number">80</span>字节<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢:"></a>鸣谢:</h3><p>感谢云朵学长对本人不厌其烦的教导.</p><p>感谢优秀的Z同学在我找C语言文档时慷慨提供的C Primer Plus.</p><p>感谢我的舍友以及另一位优秀的Z同学的审稿.</p><p>(你居然看到了这里, 那就说一下吧). 有一个很常见的, 数组名字作为参数同时<strong>不传入数组大小</strong>的使用情景, 同学们知道是什么吗?</p><p>字符串相关函数. gets, puts, strlen, scanf等函数均只接受字符串名字作为参数, 他们是怎么获取字符串长度信息的呢?</p><p><del>明天再发</del></p>]]></content>
      
      
      
        <tags>
            
            <tag> 公众号同步推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++与C的区别</title>
      <link href="/2019/11/09/c-yu-c-de-qu-bie/"/>
      <url>/2019/11/09/c-yu-c-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<h1 id="CPP-与-C"><a href="#CPP-与-C" class="headerlink" title="CPP 与 C"></a>CPP 与 C</h1><h3 id="区别1-头文件不同"><a href="#区别1-头文件不同" class="headerlink" title="区别1: 头文件不同"></a>区别1: 头文件不同</h3><p>C++头文件没有.h</p><pre class="line-numbers language-cpp"><code class="language-cpp">C语言<span class="token operator">:</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>C<span class="token operator">++</span>语言<span class="token operator">:</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stack></span> </span><span class="token comment" spellcheck="true">// C++头文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要在c++代码中引用c语言的库, 去掉.h, 并在最前面加上c.</p><pre class="line-numbers language-cpp"><code class="language-cpp">string<span class="token punctuation">.</span>h <span class="token operator">>></span><span class="token operator">></span> cstringstdio<span class="token punctuation">.</span>h  <span class="token operator">>></span><span class="token operator">></span> cstdiostdlib<span class="token punctuation">.</span>h <span class="token operator">>></span><span class="token operator">></span> cstdlib<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="区别2-读入输出方式不同"><a href="#区别2-读入输出方式不同" class="headerlink" title="区别2: 读入输出方式不同."></a>区别2: 读入输出方式不同.</h3><p><strong>c++语言中只要引用了库吗仍然可以用c语言的输入输出函数</strong>.</p><pre class="line-numbers language-cpp"><code class="language-cpp">C<span class="token operator">++</span><span class="token operator">:</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">char</span> b<span class="token punctuation">;</span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>str<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 读入 cin 右箭头 变量名</span>    <span class="token comment" spellcheck="true">// 不需要&amp;</span>    cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span>str<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 输出 cout 左箭头 变量名</span>    <span class="token comment" spellcheck="true">// endl和输出"\n"几乎等价, 但尽量用endl</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="区别3-命名空间"><a href="#区别3-命名空间" class="headerlink" title="区别3: 命名空间"></a>区别3: 命名空间</h3><p>死记硬背即可, c++代码需要在引用头文件后添加一行</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="区别4-布尔类型"><a href="#区别4-布尔类型" class="headerlink" title="区别4: 布尔类型"></a>区别4: 布尔类型</h3><p>c++语言自带布尔类型. 存储的是真和假两种情况.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> a <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//假, 与0等价</span>a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 真, 与1等价</span><span class="token comment" spellcheck="true">// 注意不要写为ture和flase</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><del>c语言引用stdbool.h后也有, 但是课内不讲</del></p>]]></content>
      
      
      
        <tags>
            
            <tag> 公众号同步推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lecture1 笔记</title>
      <link href="/2019/11/09/lecture1-bi-ji/"/>
      <url>/2019/11/09/lecture1-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p>把大问题分解为多个相似的小问题.</p><p>电影院问题: 获取人数, 如何获取?</p><pre class="line-numbers language-python"><code class="language-python">函数 获取人数<span class="token punctuation">:</span>    如果 前面没人 返回<span class="token number">1</span>    否则 问前面的人 前面有几个人 返回这个数<span class="token operator">+</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>汉诺塔问题:</p><p>定义一个函数, 移动n个饼. 如果n=1, 直接移动即可. 如果n!=1, 那么对于上面的n-1个饼, <strong>最下面的饼</strong> 并不会影响上面n-1个饼的移动. 所以, 可以递归调用此函数, 移动n-1个饼.</p><pre class="line-numbers language-python"><code class="language-python">定义函数 移动饼<span class="token punctuation">(</span>从哪儿<span class="token punctuation">,</span>到哪儿<span class="token punctuation">,</span>借助哪儿<span class="token punctuation">,</span>饼数量<span class="token punctuation">)</span><span class="token punctuation">:</span>    如果 饼数量 <span class="token operator">==</span> <span class="token number">1</span>         那么 把这个饼从<span class="token string">"从哪儿"</span>移动到<span class="token string">"到哪儿"</span>    否则        把 n <span class="token operator">-</span> <span class="token number">1</span> 个饼 从<span class="token string">"从哪儿"</span>移动到<span class="token string">"借助哪儿"</span>        这个时候<span class="token string">"从哪儿"</span>这根柱子上的最后一个饼可以直接移动到<span class="token string">"到哪儿"</span><span class="token punctuation">.</span>        所以这时候<span class="token punctuation">,</span> 移动第n个饼从<span class="token string">"从哪儿"</span>移动到<span class="token string">"到哪儿"</span>        然后移动 n <span class="token operator">-</span> <span class="token number">1</span> 个饼从<span class="token string">"借助哪儿"</span>到<span class="token string">"到哪儿"</span>        这个时候就完成了移动n个饼<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>放苹果问题:</p><p>定义一个函数用于解决”n个苹果放到m个盘子里”问题.</p><p>那么这个问题, 可以分解为以下两种子情况:</p><ol><li>每一个盘子内都放一个苹果</li><li>接下来不再对某个盘子放苹果</li></ol><pre class="line-numbers language-python"><code class="language-python">定义函数 放苹果<span class="token punctuation">(</span>苹果数<span class="token punctuation">,</span> 盘子数<span class="token punctuation">)</span><span class="token punctuation">:</span>    如果 苹果数 <span class="token operator">==</span> <span class="token number">0</span> 或者 盘子数 <span class="token operator">==</span> <span class="token number">1</span>        返回<span class="token number">1</span>    如果苹果数小于盘子数<span class="token punctuation">:</span>        <span class="token operator">//</span> 肯定至少有盘子数<span class="token operator">-</span>苹果数个盘子空着        返回 放苹果<span class="token punctuation">(</span>苹果数<span class="token punctuation">,</span> 苹果数<span class="token punctuation">)</span>    返回 放苹果<span class="token punctuation">(</span>苹果数<span class="token operator">-</span>盘子数<span class="token punctuation">,</span> 盘子数<span class="token punctuation">)</span> <span class="token operator">//</span> 每一个盘子内都放一个苹果         <span class="token operator">+</span> 放苹果<span class="token punctuation">(</span>苹果数<span class="token punctuation">,</span> 盘子<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> 接下来不再对某个盘子放苹果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>括号匹配问题:</p><p>给出一个括号序列, 判断是否是匹配的括号序列.</p><p>先读入字符串, 每次处理一个字符. 如果是左括号, 就入栈. 如果是右括号, 首先判断栈中是否有元素(s.size() &gt; 0), 如果有元素再判断栈顶元素是否是当前右括号对应的左括号. 如果是, 就把左括号出栈. 如果不是, 说明这个括号序列并不美观.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 公众号同步推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针是啥</title>
      <link href="/2019/11/09/zhi-zhen-shi-sha/"/>
      <url>/2019/11/09/zhi-zhen-shi-sha/</url>
      
        <content type="html"><![CDATA[<h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><p>说指针, 就不可避免的要和<code>*</code>这个运算符打交道. 因此, 我们首先要说的就是<code>*</code>的意思.</p><h3 id="的意思"><a href="#的意思" class="headerlink" title="*的意思"></a>*的意思</h3><h4 id="第一种用法"><a href="#第一种用法" class="headerlink" title="第一种用法:"></a>第一种用法:</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span> a <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>仅仅表示a是一个指针, 无其他含义</p><h4 id="第二种用法"><a href="#第二种用法" class="headerlink" title="第二种用法:"></a>第二种用法:</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token operator">*</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>*运算符, 表示从指针取值.此处表示将a这个指针指向的变量的值设置为2.</p><p>编程语言中, 广义的值分为<strong>左值和右值</strong>. </p><p>变量名字都是<strong>左值</strong>, 意思是<strong>可以放在等号左边的值</strong>, 也就是可以被赋值的值. </p><p>常量(如123)以及一些运算结果(如b+1)是<strong>右值</strong>, 只能放在等号右边​, 不能被赋值.</p><p>此处的<code>*a</code>是一个<strong>左值</strong>, 可以被赋值.</p><p>编译错误中提到的<code>lvalue</code>和<code>rvalue</code>指左值和右值.</p><h4 id="第三种用法"><a href="#第三种用法" class="headerlink" title="第三种用法:"></a>第三种用法:</h4><pre class="line-numbers language-cpp"><code class="language-cpp">b <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>仅表示乘法运算符.</p><p>可以看到, <code>int * a</code> 和 <code>*a</code>中的*的意义完全不同.</p><h1 id="指针与变量"><a href="#指针与变量" class="headerlink" title="指针与变量"></a>指针与变量</h1><ol><li>所有变量都存储在内存上的某个地址中, 每一个变量都有一个地址</li><li>&amp;运算符可以获取变量的地址, *运算符可以从地址获取值</li><li>地址按照字节编码(如: 地址0x100的值表示内存上的第0x100个字节), 而不是比特.</li><li>变量的值就是普通的值</li><li>指针的值是别的变量的地址</li><li>因此指针的值也可以是指针的地址(指针的指针)</li><li>因为指针存的是地址, 因此具有特殊性, 如果不初始化就访问会产生<strong>极其严重的后果</strong>, 因此<strong>要么初始化为某变量地址要么初始化为NULL.</strong></li></ol><h3 id="指针-地址-类型"><a href="#指针-地址-类型" class="headerlink" title="指针=地址+类型"></a>指针=地址+类型</h3><p>注: 0x开头的数字是16进制表示的数字, 如0x01 == 1; 0x10 == 16<br>一个字节是8个比特, 一个16进制数是4个比特(2^4==16), 因此一个16进制的两位数占用的空间大小是一个字节.</p><p>如何理解<code>指针=地址+类型</code>? 举个例子, 假设内存中的值是这样的:</p><table><thead><tr><th>值:</th><th>0x12</th><th>0x34</th><th>0x56</th><th>0x78</th></tr></thead><tbody><tr><td>地址:</td><td>0x100</td><td>0x101</td><td>0x102</td><td>0x103</td></tr></tbody></table><p>同时, 假设以下指针的值(指针中存储的地址)均为0x100:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span> a<span class="token punctuation">;</span><span class="token keyword">short</span> <span class="token operator">*</span> b<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span> c<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>则有</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token operator">*</span>a <span class="token operator">==</span> <span class="token number">0x12345678</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//从0x100开始的4个字节</span><span class="token operator">*</span>b <span class="token operator">==</span> <span class="token number">0x1234</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//从0x100开始的2个字节</span><span class="token operator">*</span>c <span class="token operator">==</span> <span class="token number">0x12</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从0x100开始的1个字节</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>因为<code>指针=地址+类型</code>, 以上三个指针指向的地址相同, 但是因为类型不同, 读取到的值也不同. int指针读取到了4个字节的值, short指针读取到了2个字节的值, char指针读取了1个字节的值.</p><p>注: 以上均假设程序在运行在大端序的环境下, 如果你不知道啥是大端序请忽略.</p><p>再比如, 对于指针的运算, 指针的类型也起到决定性作用. 众所周知, 对于以下代码:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> data<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>data是指向数组首元素的指针, data的值是数组首元素的地址.</p><p>data+1是指向数组第2个元素的指针, data+1的值是数组第二个元素的地址.</p><p>那么, 假设data=0x100, data+1等于多少?</p><p>显然, 一个int类型变量占用4个字节, data[0]占用了0x100, 0x101, 0x102, 0x103 这4个字节, 所以data+1应该等于0x104. </p><p>这就体现了一个问题: 指针运算<strong>需要知道指向的变量的大小</strong>.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> idata<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">short</span> sdata<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> cdata<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> idata<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 注: printf %p是打印了idata的值, 也就是idata数组的首项的地址.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> idata <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//会发现, idada+1 比 idata 大4</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> sdata<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> sdata <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//会发现, sdada+1 比 sdata 大2</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> cdata<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> cdata <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//会发现, cdada+1 比 cdata 大1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="无类型指针"><a href="#无类型指针" class="headerlink" title="无类型指针"></a>无类型指针</h1><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token operator">*</span> a <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>a</code>是一个无类型的指针. 因为没有类型, 所以不知道他的大小, 所以无法进行形如<code>a+1</code>的运算.<br>同样, 因为不知道类型, 也无法对这个指针”取值”(文章开头提到的*的第二个用法).</p><p>(c语言中, &amp;运算符的作用是”取地址”, *运算符的作用是”取值”.)</p><p>malloc函数的返回值是<code>void*</code>类型, 这点也很容易理解. <strong>他不知道你申请的内存要存什么类型的数据</strong>. 因此, 使用malloc时要进行<strong>强制类型转换</strong>:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 公众号同步推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷一些题</title>
      <link href="/2019/11/09/luo-gu-yi-xie-ti/"/>
      <url>/2019/11/09/luo-gu-yi-xie-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="大概每日N题-非课内难度"><a href="#大概每日N题-非课内难度" class="headerlink" title="大概每日N题(非课内难度)"></a>大概每日N题(非课内难度)</h1><p><del>被工大杯的各位julao打击到了的</del>L同学决定<del>大概</del>每天刷题, <del>绝对不咕</del>, 如果没有人问课内的问题的话就在这里写点竞赛难度的题吧.</p><h1 id="题1-P1192-台阶问题"><a href="#题1-P1192-台阶问题" class="headerlink" title="题1 P1192 台阶问题"></a>题1 P1192 台阶问题</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>有N级的台阶，你一开始在底部，每次可以向上迈最多K级台阶（最少1级），问到达第N级台阶有多少种不同方式。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>两个正整数N，K。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>一个正整数，为不同方式数，由于答案可能很大，你需要输出ansbmod 100003后的结果。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>复杂度O(nk).</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 100010</span><span class="token macro property">#<span class="token directive keyword">define</span> MOD 100003</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token keyword">int</span> data<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>k<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> <span class="token operator">++</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">-</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span><span class="token operator">=</span> MOD<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>data<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="题2-P1025-数的划分"><a href="#题2-P1025-数的划分" class="headerlink" title="题2 P1025 数的划分"></a>题2 P1025 数的划分</h1><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><pre><code>将整数n分成k份，且每份不能为空，任意两个方案不相同(不考虑顺序)。例如：n=7，k=3，下面三种分法被认为是相同的。1,1,5;1,5,1;5,1,1;问有多少种不同的分法。</code></pre><h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h3><p>n,kn,k (6&lt;n≤200, 2≤k≤6)</p><h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h3><p>1个整数，即不同的分法。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>DFS暴搜即可, 划分的时候保证升序防止出现重复.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 210</span><span class="token macro property">#<span class="token directive keyword">define</span> MAXM 7</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">classmateL</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> min<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//cout&lt;&lt;"Stepping In "&lt;&lt;n&lt;&lt;" "&lt;&lt;k&lt;&lt;endl;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> min<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">/</span> k<span class="token punctuation">;</span> <span class="token operator">++</span> i <span class="token punctuation">)</span><span class="token punctuation">{</span>        ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">classmateL</span><span class="token punctuation">(</span>n <span class="token operator">-</span> i<span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//cout&lt;&lt;"Stepping Out "&lt;&lt;n&lt;&lt;" "&lt;&lt;k&lt;&lt;" "&lt;&lt;ans&lt;&lt;endl;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>k<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">classmateL</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>k<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="题3-P1057-传球游戏"><a href="#题3-P1057-传球游戏" class="headerlink" title="题3 P1057 传球游戏"></a>题3 P1057 传球游戏</h1><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><pre class="line-numbers language-cpp"><code class="language-cpp">上体育课的时候，小蛮的老师经常带着同学们一起做游戏。这次，老师带着同学们一起做传球游戏。游戏规则是这样的：n个同学站成一个圆圈，其中的一个同学手里拿着一个球，当老师吹哨子时开始传球，每个同学可以把球传给自己左右的两个同学中的一个（左右任意），当老师再次吹哨子时，传球停止，此时，拿着球没有传出去的那个同学就是败者，要给大家表演一个节目。聪明的小蛮提出一个有趣的问题：有多少种不同的传球方法可以使得从小蛮手里开始传的球，传了mm次以后，又回到小蛮手里。两种传球方法被视作不同的方法，当且仅当这两种方法中，接到球的同学按接球顺序组成的序列是不同的。比如有三个同学<span class="token number">1</span>号、<span class="token number">2</span>号、<span class="token number">3</span>号，并假设小蛮为<span class="token number">1</span>号，球传了<span class="token number">3</span>次回到小蛮手里的方式有<span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">3</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">1</span>和<span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">3</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">1</span>，共<span class="token number">2</span>种。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h3><p>一行，有两个用空格隔开的整数n,m(3≤n≤30,1≤m≤30)。</p><h3 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h3><p>1个整数，表示符合题意的方法数。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>先想着DFS暴搜, 发现T了, 才想起来复杂度是O(m^2). </p><p>于是DP:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="题4-P1996-约瑟夫问题"><a href="#题4-P1996-约瑟夫问题" class="headerlink" title="题4 P1996 约瑟夫问题"></a>题4 P1996 约瑟夫问题</h1><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>n个人(n&lt;=100)围成一圈,从第一个人开始报数,数到m的人出列,再由下一个人重新从1开始报数,数到m的人再出圈,……依次类推,直到所有的人都出圈,请输出依次出圈人的编号.</p><h3 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h3><p>n m</p><h3 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h3><p>出圈的编号</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p>本身想暴力, 结果莫名re和tle, 只得使用队列.</p><p><del>STL大法好</del></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> que<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>            que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 公众号同步推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工大杯题解</title>
      <link href="/2019/11/09/gong-da-bei-ti-jie/"/>
      <url>/2019/11/09/gong-da-bei-ti-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="“工大杯”程序设计竞赛-罚时之旅"><a href="#“工大杯”程序设计竞赛-罚时之旅" class="headerlink" title="“工大杯”程序设计竞赛 罚时之旅"></a>“工大杯”程序设计竞赛 罚时之旅</h1><p>大家好, 我就是L·罚时一年·同学.</p><h1 id="A题"><a href="#A题" class="headerlink" title="A题"></a>A题</h1><p>DFS会WA.<br>题目有点问题, 没说明一定是一颗树, <del>但是数据太水, 导致直接求直径就能A.</del> 正解是先判环在DFS, <del>可是我并没有写出来</del>.</p><h1 id="B题"><a href="#B题" class="headerlink" title="B题"></a>B题</h1><p>乍一看还以为是表达式求值, 仔细看发现不考虑符号优先级. 注意<strong>从右往左结合</strong>, 因此读入所有数字到数字栈, 符号到符号栈, 每次取栈顶运算输出结果即可.<br><del>正解是直接倒序遍历字符串, 可是STL大法好</del></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> DEBUG 1</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string tmp<span class="token punctuation">;</span>    cin<span class="token operator">>></span>tmp<span class="token punctuation">;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums<span class="token punctuation">;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> ops<span class="token punctuation">;</span>    istringstream <span class="token function">sin</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    sin<span class="token operator">>></span>temp<span class="token punctuation">;</span>    <span class="token keyword">char</span> op<span class="token punctuation">;</span>    nums<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>op <span class="token operator">=</span> sin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ops<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>        sin<span class="token operator">>></span>temp<span class="token punctuation">;</span>        nums<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    nums<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>ops<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        op <span class="token operator">=</span> ops<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ops<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nums<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans <span class="token operator">+</span><span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans <span class="token operator">-</span><span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans <span class="token operator">*</span><span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans <span class="token operator">/</span><span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">>></span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="C题"><a href="#C题" class="headerlink" title="C题"></a>C题</h1><p>网络流, <del>可是我并不会</del></p><h1 id="D题"><a href="#D题" class="headerlink" title="D题"></a>D题</h1><p>最开始还以为是数论, 用gcd推了半天, 没推出来. 然后发现是裸的初中数学.</p><p><code>a*b = a+b = i</code>, 消元, 列二次方程, 得到<code>a^2 - a*i + i = 0</code>. 判别式大于等于0只需 <code>i*i - 4*i&gt;=0</code>.</p><p><del>当然也可以简单地判断 n 是否在(0,4)内</del></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">*</span>n<span class="token number">-4</span><span class="token operator">*</span>n<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">"YES"</span><span class="token operator">:</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="E题"><a href="#E题" class="headerlink" title="E题"></a>E题</h1><p>板子里有, <del>可是我不会高静模</del>, 于是 GG.</p><p>正解并不需要高静. 每次读入 n 的一位, 分别模 p 和 p-1, 算2^(n-1%(p-1))*n%p即可.</p><h1 id="F题"><a href="#F题" class="headerlink" title="F题"></a>F题</h1><p>不会</p><h1 id="G题"><a href="#G题" class="headerlink" title="G题"></a>G题</h1><p>水题, 暴力即可. <del>看错题了导致WA一次</del></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            n <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            n <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="H题"><a href="#H题" class="headerlink" title="H题"></a>H题</h1><p><del>并不会</del>, 正解是摩尔投票算法.</p><h1 id="I题"><a href="#I题" class="headerlink" title="I题"></a>I题</h1><p>DP, 用 count[x][i] 表示第 x 位涂色为 i 所花费的最少钱数.<br>转移方程: count[x][i] = min(count[x-1][j] + cost[x][j], j!=i) cost[x][j] 表示将 x 涂为颜色 j 所花费的钱.<br>是线性递推, <del>可以压缩至一维 dp, 但没必要.</del></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 1010</span><span class="token macro property">#<span class="token directive keyword">define</span> min(a,b) ((a)&lt;(b)?(a):(b))</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> R<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> B<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> G<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> coust<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">>></span>R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>></span>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>></span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//R 1 G 2 B 3</span>    coust<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    coust<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    coust<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> B<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        coust<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>R<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> coust<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>coust<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coust<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> coust<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>coust<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coust<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> coust<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>coust<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> minn <span class="token operator">=</span> <span class="token number">0x7fffffff</span><span class="token punctuation">;</span>    minn <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>minn<span class="token punctuation">,</span>coust<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    minn <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>minn<span class="token punctuation">,</span>coust<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    minn <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>minn<span class="token punctuation">,</span>coust<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>minn<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="J题"><a href="#J题" class="headerlink" title="J题"></a>J题</h1><p>大水题, 详情请见本公众号推送的”每日一题-每位数字问题”.<br>记得特判0.<br>如果使用数字解法, 则不需要处理前导0. 如果使用字符串需要处理前导0.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>n<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>        n<span class="token operator">/</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><del>部分题解和官方正解雷同, 并不是我抄袭, 正解就是我写的.</del></p>]]></content>
      
      
      
        <tags>
            
            <tag> 公众号同步推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>较大的正整数因子</title>
      <link href="/2019/11/09/jiao-da-de-zheng-zheng-shu-yin-zi/"/>
      <url>/2019/11/09/jiao-da-de-zheng-zheng-shu-yin-zi/</url>
      
        <content type="html"><![CDATA[<h1 id="大概每日一题-较大的正整数的因子"><a href="#大概每日一题-较大的正整数的因子" class="headerlink" title="大概每日一题-较大的正整数的因子"></a>大概每日一题-较大的正整数的因子</h1><h1 id="今天的题"><a href="#今天的题" class="headerlink" title="今天的题"></a>今天的题</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><pre class="line-numbers language-cpp"><code class="language-cpp">求正整数<span class="token function">n</span><span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token number">2</span> <span class="token number">000</span> <span class="token number">000</span> <span class="token number">001</span><span class="token punctuation">)</span>的所有因子<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><pre class="line-numbers language-cpp"><code class="language-cpp">一个小于 <span class="token number">2</span> <span class="token number">000</span> <span class="token number">000</span> <span class="token number">001</span> 的正整数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><pre class="line-numbers language-cpp"><code class="language-cpp">按从小到大的顺序输出这个整数的所有因子，不包含<span class="token number">1</span>和它本身每个因子占一行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="做题思路1"><a href="#做题思路1" class="headerlink" title="做题思路1:"></a>做题思路1:</h3><p>遍历0到sqrt(n)的每一个数, 判断是否是n的因子, 如果是, 就存起来, 之后遍历存起来的数, 输出一对因子中的另一个.</p><h3 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码:"></a>伪代码:</h3><pre class="line-numbers language-cpp"><code class="language-cpp">输入n循环i从<span class="token number">2</span>到<span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">:</span>    如果n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token operator">:</span>        输出i        data<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i循环i从count<span class="token number">-1</span>到<span class="token number">0</span><span class="token operator">:</span>    如果data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">:</span>        输出n<span class="token operator">/</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="伪代码2"><a href="#伪代码2" class="headerlink" title="伪代码2"></a>伪代码2</h3><pre class="line-numbers language-cpp"><code class="language-cpp">循环i从<span class="token number">2</span>到<span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>    如果n<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token operator">:</span>        输出i如果<span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> n    意味着n是完全平方数<span class="token punctuation">,</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>也是一个因子    输出<span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>循环i从<span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>到i    如果n<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token operator">:</span>        输出n<span class="token operator">/</span>i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后者相较前者省略了一个数组.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 公众号同步推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/2019/11/09/pai-xu-suan-fa/"/>
      <url>/2019/11/09/pai-xu-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="各类排序算法及比较"><a href="#各类排序算法及比较" class="headerlink" title="各类排序算法及比较"></a>各类排序算法及比较</h1><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序:"></a>选择排序:</h3><p>每次选择还未排序的值中最小的一个, 和第一个交换.</p><p>思路很清晰, 代码很好写, 时间复杂度为O(n^2).</p><h4 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码:"></a>伪代码:</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 要排序的数组: data[n]</span>循环i从<span class="token number">0</span>到n<span class="token number">-1</span><span class="token operator">:</span>    min <span class="token operator">=</span> <span class="token number">0x7fffffff</span>    pos <span class="token operator">=</span> <span class="token number">0</span>    循环j从i到n<span class="token number">-1</span><span class="token operator">:</span>        如果 min <span class="token operator">></span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">:</span>            pos <span class="token operator">=</span> j            min <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    交换data<span class="token punctuation">[</span>pos<span class="token punctuation">]</span>与data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>min<span class="token punctuation">,</span>pos<span class="token punctuation">,</span>t<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    min <span class="token operator">=</span> <span class="token number">0x7fffffff</span><span class="token punctuation">;</span>    pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>min <span class="token operator">></span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pos <span class="token operator">=</span> j<span class="token punctuation">;</span>            min <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    t <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>    data<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>枚举相邻的两个, 如果前者大于后者, 交换.</p><p>经过每一轮比较, 最大的一个一定会跑到数组最后面, 就像气泡浮出水面的过程, 因此叫做冒泡排序.</p><p>思路简单, 代码好写, 时间复杂度O(n^2).</p><h4 id="伪代码-1"><a href="#伪代码-1" class="headerlink" title="伪代码:"></a>伪代码:</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 要排序的数组: data[n]</span>循环i从<span class="token number">0</span>到n<span class="token number">-2</span><span class="token operator">:</span>    循环j从<span class="token number">0</span>到n<span class="token operator">-</span>i<span class="token number">-2</span><span class="token operator">:</span>        如果 data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> data<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">:</span>            交换data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码1"><a href="#代码1" class="headerlink" title="代码1:"></a>代码1:</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>t<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token number">-1</span><span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">;</span> <span class="token operator">++</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> data<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            t <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            data<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2:"></a>代码2:<a href="邓俊辉.数据结构(C++语言版).第三版.北京:清华大学出版社,2013:5-5"></a></h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> sorted <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token operator">!</span>sorted <span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//当还没排序好</span>    sorted <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//先认为已经排序好</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> data<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            t <span class="token operator">=</span> data<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            data<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>            sorted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 还没排序完毕</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    n<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 最后一位已经排序好, 可以不用管它了</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>借助标志位sorted, 能使得程序在已经排序完毕之后提前退出.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 公众号同步推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码的格式与变量的命名</title>
      <link href="/2019/11/09/dai-ma-de-ge-shi-yu-bian-liang-de-ming-ming/"/>
      <url>/2019/11/09/dai-ma-de-ge-shi-yu-bian-liang-de-ming-ming/</url>
      
        <content type="html"><![CDATA[<h1 id="代码的格式与变量的命名"><a href="#代码的格式与变量的命名" class="headerlink" title="代码的格式与变量的命名"></a>代码的格式与变量的命名</h1><p><del>(今天没题了)</del></p><p>正确的代码格式能够让你一眼就看清楚代码的架构, 同时, 当你拿着你的代码问别人的时候, <del>正确的代码格式会让别人更愿意回答你的问题</del>, 别人也能更轻松找到你代码中的错误.</p><p>那么, 如何才是正确的代码格式呢?</p><h3 id="大括号与缩进"><a href="#大括号与缩进" class="headerlink" title="大括号与缩进"></a>大括号与缩进</h3><p>大括号的风格有两种: 换行与不换行</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 换行</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    blah<span class="token punctuation">;</span>    blah<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        blah<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        blah<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 不换行</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    blah<span class="token punctuation">;</span>    blah<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">{</span>        blah<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        blah<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><del>个人更习惯后者</del>. 需要注意的就是 <strong>每遇到一个左大括号, 下一行一定要多缩进一格, 遇到一个右大括号, 下一行少缩进一格</strong>. 这样的结构能够让我们更清楚地看到多层if与for之间的层次结构关系.</p><p><strong>在一般的IDE上</strong>, 选中多行代码按<code>Tab</code>键(Q左边的)即可给这几行代码的开头添加一个锁紧, 按<code>shitf-Tab</code>即可去掉一个缩进.</p><p>同时, 大部分IDE的默认设置均是<strong>使用空格缩进, 每次缩进4个空格</strong>. 在某些IDE上(比如DevCPP)默认设置是使用制表符缩进, 这种设置的代码在粘贴到别的地方的时候可能出现格式错位, 建议修改为空格缩进.</p><p>修改方式: Devcpp中依次打开<code>工具(Tools)-编译器选项(Compiler Options)</code>, 把左下角的<code>&quot;标签&quot;(tab)</code>选项卡中的<code>&quot;使用tab字符&quot;</code>去掉, 将<code>tab位置(Tab size)</code>修改为4.</p><p>其他IDE的修改方式大同小异.</p><h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><p>在<code>&lt; &gt; = != == ^ * + - &amp;&amp;</code>等运算符的<code>左右</code>加上空格,如:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>foo <span class="token operator">^</span> bar<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">;</span><span class="token punctuation">}</span>foo <span class="token operator">=</span> bar<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在每一个逗号的后面添加一个空格,如:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在for循环中的分号后面加一个空格, 如:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// PS: 在某些环境下, for循环中使用++i比i++快一丢丢</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在<code>! &amp;</code>等一元运算符(只有一个参数的运算符)后<strong>不加空格</strong>,如:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="变量和函数的命名"><a href="#变量和函数的命名" class="headerlink" title="变量和函数的命名"></a>变量和函数的命名</h1><p>有意义的变量名字能够让阅读你代码的人立刻理解变量的意义是什么, 方便代码交流.</p><p><strong>变量命名并没有清晰的规范, 以下的都是作者的个人经验</strong></p><p>循环变量命名: <code>i j k</code></p><p>和总量大小有关的变量命名: <code>m n</code></p><p>数组的命名: <code>data[MAXN][MAXN] array[MAXN][MAXN]</code></p><p>标志的命名: <code>flag</code><br>如:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 表明找到因子</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果有因子</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字符串命名: <code>str1 str2</code></p><p>用英文单词命名: <code>scores[MAXN] students[MAXN]</code></p><p>如果名字中要有多个英文单词, 有两种命名方式:</p><ol><li>驼峰命名法(camel case) 第一个字母小写, 之后每个单词的首字母大写:<br><code>thisIsAVeryLongVariableNameForSomeVeryStupidReason</code></li><li>蛇形命名法(snake case) 单词和单词之间用下滑线连接<br><code>this_is_a_very_long_variable_name_for_some_very_stupid_reason</code></li></ol><p>两种命名方式均被广泛使用, 根据个人习惯选择即可. <del>作者印象里c语言常用的是蛇形命名法, 但不确定</del></p><p>(不推荐, 但是比无意义命名好)汉语拼音命名: <code>xueshengfenshu[MAXN]</code></p><p>函数命名:</p><p>英文单词命名, 尽量<strong>动词开头</strong>, 如:<br><code>is_prime get_numbers solve</code></p><p>算法名字命名, 如:<br><code>dfs dfs prim dijkstra</code></p><p>绝对不能用的命名: <code>mian</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> 公众号同步推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随缘指北 代码查错指北</title>
      <link href="/2019/11/09/sui-yuan-zhi-bei-dai-ma-cha-cuo-zhi-bei/"/>
      <url>/2019/11/09/sui-yuan-zhi-bei-dai-ma-cha-cuo-zhi-bei/</url>
      
        <content type="html"><![CDATA[<h1 id="代码差错指北"><a href="#代码差错指北" class="headerlink" title="代码差错指北"></a>代码差错指北</h1><p>如题, 这是随缘更新的指北.</p><p>不严谨的统计显示, 程序员的工作时间中, 10%用于构思和写代码, 30%用于debug, 60%用于纠结该给变量起什么名字.</p><p>那么问题来了, <del>抢答!! PHP天下第一!!</del>, 如何DEBUG才是高效的DEBUG呢?</p><h1 id="LOG调试法"><a href="#LOG调试法" class="headerlink" title="LOG调试法"></a>LOG调试法</h1><p>打LOG无论是在学习中还是在工作中都是极其重要的DEBUG方式. <a href="❄️.❄️和我的微信聊天记录[OL].微信,2019">1</a> 那么就有人问了, 啥是打LOG?</p><blockquote><p>LOG能帮我们:</p><p>对程序运行情况的记录和监控；</p><p>了解程序的运行状态</p></blockquote><p>总而言之, LOG就是程序运行时输出的帮助我们辨别程序运行状态的输出.</p><h2 id="通过LOG看变量的值"><a href="#通过LOG看变量的值" class="headerlink" title="通过LOG看变量的值"></a>通过LOG看变量的值</h2><p>这点很显然, 程序执行到一半输出变量的值就能知道变量的值是多少. <del>废话</del> 需要注意的是, 不仅仅能打印变量的值, 还能打印表达式的值.</p><p>举个例子: 优秀的X同学在做某道题的时候写出了以下的代码</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">long</span> a<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注意这里有一个错误: 应该是%ld</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    执行某些代码<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>他输入了-1之后,发现本应执行的if语句内代码并没有被执行. 于是他就在第三行插入了 <code>printf(&quot;%d&quot;,a==-1);</code>, 发现输出的值是0, 意味着a并不等于-1. 意识到 <code>a!=-1</code> 之后, 优秀的X同学就意识到了scanf处出现了错误.</p><h2 id="通过LOG判断程序执行的位置"><a href="#通过LOG判断程序执行的位置" class="headerlink" title="通过LOG判断程序执行的位置"></a>通过LOG判断程序执行的位置</h2><p>看到上面的例子后, 各位可能有个疑惑: “X同学是怎么知道程序没有执行if语句内的内容呢?”</p><p>(做手势: 看看本节标题) 你是不是心中浮现了一个玄妙的想法: 只要在if语句内输出点东西就好了啊! 是不是特别神奇! (夸张脸)</p><p>说时迟, 那时快, 只见X同学飞快的敲下了以下代码</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">long</span> a<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注意这里有一个错误: 应该是%ld</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"这个东西应该输出的啊???"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 当然并没有输出</span>    执行某些代码<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当他按下了神圣的<code>F11</code>键之后, “当场他就懵了”, 陷入了沉思.</p><h2 id="通过LOG查看递归调用的函数"><a href="#通过LOG查看递归调用的函数" class="headerlink" title="通过LOG查看递归调用的函数"></a>通过LOG查看递归调用的函数</h2><p>这点可能课内还没有学到, 可以等讲完课后回来复习 (观众留存度++)</p><p>对于一个递归函数, 比如汉诺塔:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">hanoi</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">char</span> from<span class="token punctuation">,</span> <span class="token keyword">char</span> via<span class="token punctuation">,</span> <span class="token keyword">char</span> to<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"将要从%c通过借助%c移动%d个盘子到%c\n"</span><span class="token punctuation">,</span>from<span class="token punctuation">,</span>via<span class="token punctuation">,</span>n<span class="token punctuation">,</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">move</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">hanoi</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> from<span class="token punctuation">,</span> to<span class="token punctuation">,</span> via<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">move</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">hanoi</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> via<span class="token punctuation">,</span> from<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"已经从%c通过借助%c移动%d个盘子到%c\n"</span><span class="token punctuation">,</span>from<span class="token punctuation">,</span>via<span class="token punctuation">,</span>n<span class="token punctuation">,</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="室友调试法"><a href="#室友调试法" class="headerlink" title="室友调试法"></a>室友调试法</h1><p>把室友扥(den)过来, 完整的讲述你程序的思路给他听, (不用管室友是否真的在听), 一般讲到一半你就会意识到你哪儿错了</p><h1 id="小黄鸭调试法"><a href="#小黄鸭调试法" class="headerlink" title="小黄鸭调试法"></a>小黄鸭调试法</h1><p>没有室友? 找一只小黄鸭放在桌子上给它讲述你的程序思路.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 公众号同步推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题 每位数字问题</title>
      <link href="/2019/11/09/mei-ri-yi-ti-mei-wei-shu-zi-wen-ti/"/>
      <url>/2019/11/09/mei-ri-yi-ti-mei-wei-shu-zi-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="大概每日一题"><a href="#大概每日一题" class="headerlink" title="大概每日一题"></a>大概每日一题</h1><p>首先, 给各位道个歉. 昨天由于<strong>沉迷学习</strong>忘了更新, <del>绝对不是忙于抢新题库的一血</del></p><p>那么,</p><h2 id="作天的题"><a href="#作天的题" class="headerlink" title="作天的题"></a>作天的题</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><pre class="line-numbers language-cpp"><code class="language-cpp">本关任务：计算正整数num的各位上的数字之积。例如：输入：<span class="token number">2583</span>  经过<span class="token punctuation">(</span>2x5x8x3<span class="token punctuation">)</span> 输出：<span class="token number">240</span>输入：<span class="token number">102</span>   经过<span class="token punctuation">(</span>1x0x2<span class="token punctuation">)</span>   输出：<span class="token number">0</span>输入：<span class="token number">136</span>   经过<span class="token punctuation">(</span>1x3x6<span class="token punctuation">)</span>   输出：<span class="token number">18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><pre class="line-numbers language-cpp"><code class="language-cpp">一个数num<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><pre class="line-numbers language-cpp"><code class="language-cpp">运算结果<span class="token punctuation">(</span>一个整数<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="做题思路1"><a href="#做题思路1" class="headerlink" title="做题思路1"></a>做题思路1</h2><p>循环, 每次取一位, 和ans变量相乘.</p><h3 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码:"></a>伪代码:</h3><pre class="line-numbers language-cpp"><code class="language-cpp">ans <span class="token operator">=</span> <span class="token number">1</span>输入numk <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span><span class="token punctuation">(</span>num <span class="token operator">/</span> k <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span>    ans <span class="token operator">*</span><span class="token operator">=</span> <span class="token punctuation">(</span>num<span class="token operator">/</span>k<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span> <span class="token comment" spellcheck="true">// num去掉后面的位数后取最后一位</span>    k <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span>输出ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种思路的核心在于, 设置中间变量k. 每次把num除k来去掉尾部多余的位数之后取最后一位累乘.</p><h2 id="做题思路2"><a href="#做题思路2" class="headerlink" title="做题思路2"></a>做题思路2</h2><p>循环, 每次取num的最后一位, 和ans变量相乘后<strong>去掉最后一位</strong></p><h3 id="伪代码-1"><a href="#伪代码-1" class="headerlink" title="伪代码:"></a>伪代码:</h3><pre class="line-numbers language-cpp"><code class="language-cpp">ans <span class="token operator">=</span> <span class="token number">1</span>读入num<span class="token keyword">while</span> num <span class="token operator">!=</span> <span class="token number">0</span><span class="token operator">:</span>    ans <span class="token operator">*</span><span class="token operator">=</span> <span class="token punctuation">(</span>num<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ans乘以num的最后一位</span>    num <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span>       <span class="token comment" spellcheck="true">// 核心: 去掉num的最后一位</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个思路的核心在于, 每次取最后一位num用于计算后<strong>去掉最后一位</strong>.<br>相比第一个思路的好处是 <strong>省略了一个中间变量</strong>.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 公众号同步推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1024特别节目</title>
      <link href="/2019/11/09/1024-te-bie-jie-mu/"/>
      <url>/2019/11/09/1024-te-bie-jie-mu/</url>
      
        <content type="html"><![CDATA[<h1 id="1024特别节目"><a href="#1024特别节目" class="headerlink" title="1024特别节目"></a>1024特别节目</h1><p>今天是1024程序员节</p><p>不知道能为各位做点什么,<br>给各位画幅画吧</p><pre class="line-numbers language-cpp"><code class="language-cpp">  O  <span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一副海上明月图送给大家</p>]]></content>
      
      
      
        <tags>
            
            <tag> 公众号同步推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题 鞍点</title>
      <link href="/2019/11/09/mei-ri-yi-ti-an-dian/"/>
      <url>/2019/11/09/mei-ri-yi-ti-an-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="每日一题"><a href="#每日一题" class="headerlink" title="每日一题"></a>每日一题</h1><p>公众号新开了个栏目, 叫大概每日一题.</p><p>那么问题来了, 为啥叫大概每日一题呢?</p><p>鸽子表情包</p><h2 id="今天的题"><a href="#今天的题" class="headerlink" title="今天的题"></a>今天的题</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h3><pre><code>找出具有m行n列二维数组Array的“鞍点”，即该位置上的元素在该行上最大，在该列上最小，其中1&lt;=m,n&lt;=10。</code></pre><h3 id="输入"><a href="#输入" class="headerlink" title="输入:"></a>输入:</h3><pre><code>第一行有两个数m和n，下面有m行，每行有n个数。</code></pre><h3 id="输出"><a href="#输出" class="headerlink" title="输出:"></a>输出:</h3><pre><code>Array[i][j]=x</code></pre><h2 id="做题思路"><a href="#做题思路" class="headerlink" title="做题思路"></a>做题思路</h2><p>这道题的思路还是比较清晰的: 枚举每一行, 寻找这一行里最大的数在第几列, 寻找那一列最小的数, 看看这一行最大的数是不是这一列最小的数.</p><h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码:"></a>伪代码:</h2><pre><code>输入m,n循环i从0到m-1    循环j从0到n-1        读入data[i][j]循环i从0到m-1    max=data[i][0]    pos=0    循环j从0到n-1        如果data[i][j] 大于 max            更新max与pos    flag = 1    循环j从0到n-1        如果data[j][pos]小于max            flag = 0    如果flag=1 说明data[i][pos]是鞍点        输出,退出程序输出none</code></pre><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>在找数组的最小值的时候有两种实现方式:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0x70000000</span><span class="token punctuation">;</span><span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span><span class="token operator">++</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>min <span class="token operator">&lt;</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        min <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        pos <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> min <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span><span class="token operator">++</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>min <span class="token operator">&lt;</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        min <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        pos <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一种方式将min设为极大值(或将max设为极小值), 第二种方式奖min设为数组第一项的值.</p><p>这两种方式都是正确的, 要注意的就是</p><ol><li>使用第一种方式时设置的极大值一定要很大.<ol><li>int所能存储的最大值是0x7fffffff, 所以对于以上情况把min设置为0x7ffffff是安全的.</li><li>对于要比较min+data[i]和data[i]的大小的时候, min的初值应设置为int所能存储的最大值的一半, 以保证min+data[i]仍在int范围内. 对于这种情况, 0x3f3f3f3f是一个安全的值.</li></ol></li><li>使用第二种方式一定要把pos变量初始化为0</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 公众号同步推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac上Docker的一些坑</title>
      <link href="/2019/06/30/mac-shang-docker-de-yi-xie-keng/"/>
      <url>/2019/06/30/mac-shang-docker-de-yi-xie-keng/</url>
      
        <content type="html"><![CDATA[<p>在搭建我的个人开发环境的过程中, 对于PHP开发我选择了Docker这样的方案. 这种方案相比valet最大的好处就在于自由: 可以自由定制自己所需的nginx配置, php配置, 在安装php插件时也会方便一些.<br>但是, 在搭建完毕运行之后, 碰到了许多坑.<br>我最先搭建的是WHMCS测试站. 搭建完毕之后发现无论打开什么页面, 最短的加载时间也在5s左右. 对于搭建在本地的whmcs来讲, 这自然是十分不正常的, 百度了一下如何解决之后, 我决定开启php-fpm的slowlog来看看是哪里出了问题.<br>在docker中开启slowlog之后, 超时时间设置为了1s, 但是当页面加载时间为5s时, log文件内仍无任何内容.<br>Google了一番, 发现php-fpm使用SYS_PTRACE这一个系统调用来统计程序运行的时间, 而默认情况下docker容器内并没有此权限, 只要在docker-compose.yml内加入 <code>privileged: true</code> 即可解决问题.<br>这就是第一个坑: <code>PHP-fpm在无任何错误提示的时候不能产出slowlog</code></p><p>折腾了半天终于能看到slowlog了, 内容却让我很疑惑: </p><pre class="line-numbers language-log"><code class="language-log">[30-Jun-2019 15:33:20]  [pool www] pid 10script_filename = /data/www/whmcs//admin/login.php[0x00007f063aa211b0] Composer\Autoload\includeFile() /data/www/whmcs/vendor/composer/ClassLoader.php:322[0x00007f063aa21120] loadClass() unknown:0[0x00007f063aa210c0] spl_autoload_call() unknown:0[0x00007ffdbaff9320] ???() /data/www/whmcs/loghandler.php:44<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>占据主要时间的前三个函数都是composer的函数, 貌似没有任何解决方案. 在Google一番之后, 发现这里的慢主要在于 OS X 下的 Docker 磁盘性能过低, 导致读取php文件速度过慢, 时间变长. 测试了各种解决方案之后, <a href="//docker-sync.io">docker-sync</a> 解决了这个问题, 将整个网页的加载时间由5s缩短为300ms.</p><p>更新: docker-sync有各种玄学bug, 还是虚拟机为妙.</p>]]></content>
      
      
      <categories>
          
          <category> 折腾笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MAC </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oneplus 7 Pro 刷机教程</title>
      <link href="/2019/06/13/oneplus-7-pro-shua-ji-jiao-cheng/"/>
      <url>/2019/06/13/oneplus-7-pro-shua-ji-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<p><strong>不同批次的手机安装的出厂H2OS版本不同, 本流程不一定适用于所有手机.</strong></p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li>从<a href="https://developer.android.com/studio/releases/platform-tools" target="_blank" rel="noopener">这里</a>下载相关工具包</li><li>系统设置-关于手机 点击7次系统版本号 开启开发者模式</li><li>开发者模式中开启”高级重启”和”OEM解锁”</li><li>长按电源键, 选择重启到引导加载器</li><li>连接电脑, 在电脑上运行 <code>fastboot oem unlock</code></li><li>在手机上确认</li></ol><h3 id="氧OS"><a href="#氧OS" class="headerlink" title="氧OS"></a>氧OS</h3><p>绝大部分手机出厂预装的H2os中BootLoader的版本较低, 不支持安装TWRP. 需先安装O2OS.</p><ol><li>到<a href="https://otafsg1.h2os.com/patch/amazone2/GLO/OnePlus7ProOxygen/OnePlus7ProOxygen_21.O.11_GLO_011_1906160627/OnePlus7ProOxygen_21.O.11_OTA_011_all_1906160627_b59b4dfc6d8c9a.zip" target="_blank" rel="noopener">这里</a>下载O2OS, 并用adb导入到手机中.</li><li>在手机设置-系统更新-本地升级中, 选择此ZIP包.</li><li>若成功刷入, 即可开始刷入TWRP.</li><li>若刷入不成功, 则预装的H2os版本较高. 使用以下步骤安装O2OS:<ol><li>将安装包通过adb导入手机中, 重启进入bootloader, 连接电脑</li><li>在电脑上从<a href="https://twrp.me/oneplus/oneplus7pro.html" target="_blank" rel="noopener">这里</a> 下载TWRP的两个文件(img,zip)</li><li>电脑上运行 <code>fastboot boot twrp-3.3.1-3-guacamole.img</code></li><li>手机会重启进入TWRP. 三清后刷入氧os安装包, 刷入后再进行一次三清</li><li>重启进入系统. 若无限循环进入revocery, 则再次连接电脑, 运行fastboot指令进入TWRP后选择 Advanced - Fix Revocery Bootloop</li></ol></li></ol><h3 id="TWRP"><a href="#TWRP" class="headerlink" title="TWRP"></a>TWRP</h3><ol><li>在电脑上从<a href="https://twrp.me/oneplus/oneplus7pro.html" target="_blank" rel="noopener">这里</a> 下载TWRP的两个文件(img,zip)</li><li>将zip文件通过adb导入手机</li><li>手机重启进入 Bootloader 连接电脑</li><li>电脑上运行 <code>fastboot boot twrp-3.3.1-3-guacamole.img</code></li><li>手机会进入临时的TWRP. 在此临时的TWRP中选择刷入上面导入的 TWRP zip 包</li></ol><h3 id="Magisk"><a href="#Magisk" class="headerlink" title="Magisk"></a>Magisk</h3><ol><li>下载 Magisk Manager 以及 magisk zip包</li><li>重启进入 Revocery , 刷入ZIP包即可.</li></ol><h3 id="OTA"><a href="#OTA" class="headerlink" title="OTA"></a>OTA</h3><p>按照O2OS - TWRP - Magisk的顺序刷入即可.</p><ol><li>下载完整包, 并准备好TWRP安装包, Magisk安装包. 重启进入TWRP.</li><li>TWRP内先后刷入ROM与TWRP</li><li>TWRP内选择重启到另一个slot</li><li>TWRP内安装Magisk</li><li>重启进入系统</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 刷机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oneplus 7 Pro 初体验</title>
      <link href="/2019/06/12/oneplus-7-pro-chu-ti-yan/"/>
      <url>/2019/06/12/oneplus-7-pro-chu-ti-yan/</url>
      
        <content type="html"><![CDATA[<p><strong>这是一篇站在消费者个人角度的陈述.</strong></p><p><strong>本人不善言辞, 尽请谅解.</strong></p><h2 id="买前"><a href="#买前" class="headerlink" title="买前"></a>买前</h2><p><img src="/medias/oneplus-1.jpg" alt="一加7Pro 星雾蓝"><br>高考前就一直在想高考后要换个手机, 高考后仔细敲定, 基于以下原因选择了一加7Pro:</p><ol><li>一加对刷机友好, Root方便.</li><li>屏幕90Hz,2K (买之前看官方宣传只是觉得很厉害,真正到手体验一天后才会发现用起来有多爽)</li><li>配置基本是顶级(855, 8+256, UFS3.0储存)</li><li>摄像头不错(48+16+8 MP Triple Camera), 将来可能配合云台拍Vlog</li></ol><h2 id="买中"><a href="#买中" class="headerlink" title="买中"></a>买中</h2><p>看到6月10日10:00官网上开卖的消息, 结合前几次10点开卖, 12点还有货, 我就没有特别准时抢. 10:01打开一加官网的时候就显示已经售罄了.<br>(同时还观测到另一个问题: 使用最新安卓chrome打开一加官网, 官网上的登录滑动验证码总是无法完成, 不知道什么原因.)<br>约好和R同学同时抢的我微信上问了问R同学,于是就发生了以下的故事:<br><img src="/medias/oneplus-2.png" alt="聊天"><br>确认官网抢不到之后, 我在刷朋友圈的时候偶然发现同学在京东官网上买到了, 立即打开京东官网, 下单. 下单过程之中还发现, 8+256的机器是4499元. 所以如果在官网上买的话, 加一个289多元的碎屏险后是4788多元. 可是在京东上买相同的官方碎屏险只需要4699元, 便宜了几十块钱. </p><p>不知道为什么官网价格和京东价格不一样? </p><p>(同时,官网无货, 京东官方旗舰店有货这种骚操作我也不能理解)</p><h2 id="到手"><a href="#到手" class="headerlink" title="到手"></a>到手</h2><p>机器到手之后, 开箱, 解锁, 并没有感受到各路评测所描述的 <strong>“惊艳”</strong> 的屏幕. (甚至到手的第一感觉只是星雾蓝后盖挺好看).</p><p>我的机器到手之后的流程就是 刷氧os - 刷twrp - 刷 magisk. 在此过程中, 踩到了不少坑, 我会将相关内容整理到<a href="#">这里</a>.</p><p>全部刷好之后, 三清, 重新初始化. 初始化过程中直接在网络环境较好的地方, Google账户第一时间登录, 就自动把配置下载下来了. </p><p>惊喜到我的是, 不仅通讯录之类的信息同步到了新手机上, 就连gboard的配置也一起同步了过来. 最惊奇的是, 就连我手机热点的配置的wifi名称和密码都一起同步了过来. 在国内, 谷歌框架的配置同步和迁移功能真是体验比小米等品牌强得多.</p><p>在安装国内软件的过程中, 这次的全新装机我采用了一下原则:</p><ol><li>能在 Google Play 安装尽量在上面安装, 不能的在酷安上安装.</li><li>对于 <strong>所有</strong> 我没有观察到兼容性问题的应用开启存储重定向.<br>这样子, 在这个新手机上我的收获就是极其整洁的SD卡根目录. 在根目录中, 除了系统创建的文件夹以及magisk插件创建的一个文件之外, 没有任何应用创建的文件. 截至撰写本文时, 没有观测到任何兼容性问题. (应用间分享文件可通过Bridge应用解决)</li></ol><h2 id="拍照体验"><a href="#拍照体验" class="headerlink" title="拍照体验"></a>拍照体验</h2><p>由于还没来得及测试夜景, 在此放出几张在故宫拍摄的照片:</p><p><img src="/medias/IMG_20190611_082626.jpg" alt="故宫1"><br><img src="/medias/IMG_20190611_085806.jpg" alt="故宫2"><br><img src="/medias/IMG_20190611_084744_01.jpg" alt="故宫3"></p><h2 id="使用体验"><a href="#使用体验" class="headerlink" title="使用体验"></a>使用体验</h2><p>在故宫玩了一天(体验一天一加7p)后, 再用回之前的一加3t, 突然特别不适应. 各种操作都显得不”顺滑”, 顶部和底部的大黑边看上去也很不爽… 总之, 正如评测们所述, 一旦用惯了一加7p, 你就再也回不去了.</p><h2 id="一些坑点"><a href="#一些坑点" class="headerlink" title="一些坑点:"></a>一些坑点:</h2><ol><li>默认使用的是虚拟按键, 若要使用全面屏手势需要手动开启</li><li>不同批次的机器预装的氢os版本不同, <strong>刷机方法不同</strong> (我和R同学的两台机器是<strong>同时</strong>购买的, <strong>同时</strong>在同一京东仓库出货, 当R同学使用我刷机成功的方式时差点变砖. )</li><li>前置摄像头伸出需要至少半秒左右</li><li>官网购买流程体验极差.</li></ol><p>小弟不才, 在此赋诗一首:<br>官网下单需警惕,价格<strong>坑人</strong>不客气.<br>奈何<strong>强东美价廉</strong>,京东小哥做兄弟.</p>]]></content>
      
      
      <categories>
          
          <category> General </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 无聊瞎写点东西 </tag>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello, World!</title>
      <link href="/2019/06/12/hello-world/"/>
      <url>/2019/06/12/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>高考前, 就一直想弄一个自己的blog. Wordpress, typeecho, 试过了许多程序, 也弄过好多次各类blog, 最终都不了了之.</p><p>这一次,打算还是用hexo弄. 选用hexo的原因呢, 主要有:</p><ol><li>可以用 Github Pages 部署, 没有服务器费用, 没有被攻击的风险.</li><li>Markdown 书写, 更方便</li><li>将来还可能搞个微信公众号, so 用 Markdown 书写的话, 可以使用批量工具将 Blog 内的内容复制到微信公众号中.</li></ol><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>先是看了看<a href="hexo.io">官方文档</a>, 研究了下hexo怎么用. 接着翻了翻收藏, 找到了以前收藏的一个hexo主题 <a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">Matery</a>. Clone下来配置一通后, 就完成了你们现在看到的 Blog.</p><h2 id="愿景"><a href="#愿景" class="headerlink" title="愿景"></a>愿景</h2><p>将来可能更新的内容:</p><ol><li>TensorFlow教程</li><li>自己写的一些PHP插件</li><li>自己搞的物联网小设备</li><li>自己在B站上传的VLog(可能跳票)</li></ol><h2 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h2><p>如果想挂个友联, 欢迎邮箱联系 <code>i@leoleoasd.me</code></p><p>有其他想法或者建议, 也可以给我发邮件.</p><p>(突然想起来高考备考的应用文套路:  <code>If you have any further questions, feel free to drop me a line.</code>)</p>]]></content>
      
      
      <categories>
          
          <category> General </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 无聊瞎写点东西 </tag>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
